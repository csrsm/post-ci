(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{519:function(t,a,s){"use strict";s.r(a);var n=s(5),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"gitaction结合gitpage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitaction结合gitpage"}},[t._v("#")]),t._v(" GitAction结合gitPage")]),t._v(" "),s("h2",{attrs:{id:"需求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#需求"}},[t._v("#")]),t._v(" 需求")]),t._v(" "),s("p",[t._v("使用vuepress更新博客时，需要在本地将该项目运行编译后上传编译后的静态文件，在push到github，更新git pages站点。过程较复杂，每次更新都需要安装项目的运行环境。")]),t._v(" "),s("h2",{attrs:{id:"一、github-actions-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、github-actions-是什么"}},[t._v("#")]),t._v(" 一、GitHub Actions 是什么？")]),t._v(" "),s("p",[t._v("大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。\n很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。\n如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。\nGitHub 做了一个"),s("a",{attrs:{href:"https://github.com/marketplace?type=actions",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方市场"),s("OutboundLink")],1),t._v("，可以搜索到他人提交的 actions。另外，还有一个 "),s("a",{attrs:{href:"https://github.com/sdras/awesome-actions",target:"_blank",rel:"noopener noreferrer"}},[t._v("awesome actions"),s("OutboundLink")],1),t._v(" 的仓库，也可以找到不少 action。\n"),s("img",{attrs:{src:t.$withBase("/img/gitAction/gitAction1.png")}}),t._v("\n上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用userName/repoName的语法引用 action。比如，actions/setup-node就表示github.com/actions/setup-node这个"),s("a",{attrs:{href:"https://github.com/actions/setup-node",target:"_blank",rel:"noopener noreferrer"}},[t._v("仓库"),s("OutboundLink")],1),t._v("，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 "),s("a",{attrs:{href:"https://github.com/actions",target:"_blank",rel:"noopener noreferrer"}},[t._v("github.com/actions"),s("OutboundLink")],1),t._v(" 里面。\n既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见"),s("a",{attrs:{href:"https://help.github.com/en/articles/about-actions#versioning-your-action",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"二、基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、基本概念"}},[t._v("#")]),t._v(" 二、基本概念")]),t._v(" "),s("p",[t._v("GitHub Actions 有一些自己的术语。\n（1）"),s("strong",[t._v("workflow")]),t._v(" （工作流程）：持续集成一次运行的过程，就是一个 workflow。\n（2）"),s("strong",[t._v("job")]),t._v(" （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。\n（3）"),s("strong",[t._v("step")]),t._v("（步骤）：每个 job 由多个 step 构成，一步步完成。\n（4）"),s("strong",[t._v("action")]),t._v(" （动作）：每个 step 可以依次执行一个或多个命令（action）。")]),t._v(" "),s("h2",{attrs:{id:"三、workflow-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、workflow-文件"}},[t._v("#")]),t._v(" 三、workflow 文件")]),t._v(" "),s("p",[t._v("GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的.github/workflows目录。\nworkflow 文件采用 "),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/07/yaml.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("YAML 格式"),s("OutboundLink")],1),t._v("，文件名可以任意取，但是后缀名统一为.yml，比如foo.yml。一个库可以有多个 workflow 文件。GitHub 只要发现.github/workflows目录里面有.yml文件，就会自动运行该文件。\nworkflow 文件的配置字段非常多，详见"),s("a",{attrs:{href:"https://help.github.com/en/articles/workflow-syntax-for-github-actions",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1),t._v("。下面是一些基本字段。\n"),s("strong",[t._v("（1）name")]),t._v("\nname字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。\nname: GitHub Actions Demo\n"),s("strong",[t._v("（2）on")]),t._v("\non字段指定触发 workflow 的条件，通常是某些事件。\non: push\n上面代码指定，push事件触发 workflow。\non字段也可以是事件的数组。\non: [push, pull_request]\n上面代码指定，push事件或pull_request事件都可以触发 workflow。\n完整的事件列表，请查看"),s("a",{attrs:{href:"https://help.github.com/en/articles/events-that-trigger-workflows",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1),t._v("。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。\n"),s("strong",[t._v("（3）on.<push|pull_request>.<tags|branches>")]),t._v("\n指定触发事件时，可以限定分支或标签。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branches")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("    \n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master\n")])])]),s("p",[t._v("上面代码指定，只有master分支发生push事件时，才会触发 workflow。\n"),s("strong",[t._v("（4）jobs.<job_id>.name")]),t._v("\nworkflow 文件的主体是jobs字段，表示要执行的一项或多项任务。\njobs字段里面，需要写出每一项任务的job_id，具体名称自定义。job_id里面的name字段是任务的说明。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("my_first_job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" My first job\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("my_second_job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" My second job\n")])])]),s("p",[t._v("上面代码的jobs字段包含两项任务，job_id分别是my_first_job和my_second_job。\n"),s("strong",[t._v("（5）jobs.<job_id>.needs")]),t._v("\nneeds字段指定当前任务的依赖关系，即运行顺序。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("needs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" job1\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("job3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("needs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("job1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" job2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("上面代码中，job1必须先于job2完成，而job3等待job1和job2的完成才能运行。因此，这个 workflow 的运行顺序依次为：job1、job2、job3。\n"),s("strong",[t._v("（6）jobs.<job_id>.runs-on")]),t._v("\nruns-on字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。")]),t._v(" "),s("ul",[s("li",[t._v("ubuntu-latest，ubuntu-18.04或ubuntu-16.04")]),t._v(" "),s("li",[t._v("windows-latest，windows-2019或windows-2016")]),t._v(" "),s("li",[t._v("macOS-latest或macOS-10.14")])]),t._v(" "),s("p",[t._v("下面代码指定虚拟机环境为ubuntu-18.04。\nruns-on: ubuntu-18.04\n"),s("strong",[t._v("（7）jobs.<job_id>.steps")]),t._v("\nsteps字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。")]),t._v(" "),s("ul",[s("li",[t._v("jobs.<job_id>.steps.name：步骤名称。")]),t._v(" "),s("li",[t._v("jobs.<job_id>.steps.run：该步骤运行的命令或者 action。")]),t._v(" "),s("li",[t._v("jobs.<job_id>.steps.env：该步骤所需的环境变量。")])]),t._v(" "),s("p",[t._v("下面是一个完整的 workflow 文件的范例。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Greeting from Mona\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" push\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("my-job")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" My Job\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runs-on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Print a greeting\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MY_VAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Hi there"),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v(" My name is\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("FIRST_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Mona\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MIDDLE_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" The\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("LAST_NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Octocat\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n        echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.")]),t._v("\n")])])]),s("p",[t._v("上面代码中，steps字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。")]),t._v(" "),s("h2",{attrs:{id:"四、实例-react-项目发布到-github-pages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、实例-react-项目发布到-github-pages"}},[t._v("#")]),t._v(" 四、实例：React 项目发布到 GitHub Pages")]),t._v(" "),s("p",[t._v("下面是一个实例，通过 GitHub Actions 构建一个 React 项目，并发布到 GitHub Pages。最终代码都在"),s("a",{attrs:{href:"https://github.com/ruanyf/github-actions-demo",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个仓库"),s("OutboundLink")],1),t._v("里面，发布后的参考网址为"),s("a",{attrs:{href:"https://ruanyf.github.io/github-actions-demo",target:"_blank",rel:"noopener noreferrer"}},[t._v("ruanyf.github.io/github-actions-demo"),s("OutboundLink")],1),t._v("。\n第一步，GitHub Actions 目前还处在测试阶段，需要到"),s("a",{attrs:{href:"https://github.com/features/actions/signup/",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个网址"),s("OutboundLink")],1),t._v("申请测试资格。申请以后，可能需要几天才能通过。据说，2019年11月就会放开。\n获得资格后，仓库顶部的菜单会出现Actions一项。\n"),s("img",{attrs:{src:t.$withBase("/img/gitAction/gitAction2.png")}}),t._v("\n第二步，这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照"),s("a",{attrs:{href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1),t._v("，生成一个密钥。然后，将这个密钥储存到当前仓库的Settings/Secrets里面。\n"),s("img",{attrs:{src:t.$withBase("/img/gitAction/gitAction3.png")}}),t._v("\n上图是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是ACCESS_TOKEN。如果你不用这个名字，后面脚本里的变量名也要跟着改。\n第三步，本地计算机使用"),s("a",{attrs:{href:"https://github.com/facebook/create-react-app",target:"_blank",rel:"noopener noreferrer"}},[t._v("create-react-app"),s("OutboundLink")],1),t._v("，生成一个标准的 React 应用。\n$ npx create-react-app github-actions-demo $ cd github-actions-demo\n然后，打开package.json文件，加一个homepage字段，表示该应用发布后的根目录（参见"),s("a",{attrs:{href:"https://create-react-app.dev/docs/deployment#building-for-relative-paths",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1),t._v('）。\n"homepage": "https://[username].github.io/github-actions-demo",\n上面代码中，将[username]替换成你的 GitHub 用户名，参见'),s("a",{attrs:{href:"https://github.com/ruanyf/github-actions-demo/blob/master/package.json#L10",target:"_blank",rel:"noopener noreferrer"}},[t._v("范例"),s("OutboundLink")],1),t._v("。\n第四步，在这个仓库的.github/workflows目录，生成一个 workflow 文件，名字可以随便取，这个示例是ci.yml。\n我们选用一个别人已经写好的 action："),s("a",{attrs:{href:"https://github.com/marketplace/actions/deploy-to-github-pages",target:"_blank",rel:"noopener noreferrer"}},[t._v("JamesIves/github-pages-deploy-action"),s("OutboundLink")],1),t._v("，它提供了 workflow 的范例文件，直接拷贝过来就行了（查看"),s("a",{attrs:{href:"https://github.com/ruanyf/github-actions-demo/blob/master/.github/workflows/ci.yml",target:"_blank",rel:"noopener noreferrer"}},[t._v("源码"),s("OutboundLink")],1),t._v(")。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以下以一个构建vue项目的yml文件为例子")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" GitHub Actions Build and Deploy\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branches")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" master "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里只配置了master分支，所以只有推送master分支才会触发以下任务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("jobs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build-and-deploy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("concurrency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ci"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" github.ref "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("runs-on")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("latest\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("steps")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Checkout  ️ "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将代码拉取到虚拟机")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/checkout@v3\n\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Use Node.js\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置 Node 执行环境（当前构建的服务器默认没有 Node 环境，可以通过 Action 安装 Node）")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://github.com/actions/setup-node")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" actions/setup"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("node@v1\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node-version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Install and Build   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装依赖、打包，如果提前已打包好无需这一步")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装 Node 之后就可以执行构建脚本")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n          npm install yarn -g\n          yarn\n          yarn build")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Deploy\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将构建产物 commit 到一个分支上，用于发布静态站点资源")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://github.com/peaceiris/actions-gh-pages")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uses")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" JamesIves/github"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pages"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("deploy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("action@v4\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("with")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pages "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 部署后提交到那个分支")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("folder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dist "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里填打包好的目录名称")]),t._v("\n\n\n")])])]),s("p",[t._v("上面这个 workflow 文件的要点如下。")]),t._v(" "),s("ol",[s("li",[t._v("整个流程在master分支发生push事件时触发。")]),t._v(" "),s("li",[t._v("只有一个job，运行在虚拟机环境ubuntu-latest。")]),t._v(" "),s("li",[t._v("第一步是获取源码，使用的 action 是actions/checkout。")]),t._v(" "),s("li",[t._v("第二步是构建和部署，使用的 action 是JamesIves/github-pages-deploy-action。")]),t._v(" "),s("li",[t._v("第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub 密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。")])]),t._v(" "),s("p",[t._v("第五步，保存上面的文件后，将整个仓库推送到 GitHub。\nGitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看"),s("a",{attrs:{href:"https://github.com/ruanyf/github-actions-demo/commit/24fbf6a875351297f31434fd44bc3146accf9e59/checks",target:"_blank",rel:"noopener noreferrer"}},[t._v("运行日志"),s("OutboundLink")],1),t._v("，日志默认保存30天。\n"),s("img",{attrs:{src:t.$withBase("/img/gitAction/gitAction4.png")}}),t._v("\n等到 workflow 运行结束，访问 "),s("a",{attrs:{href:"https://ruanyf.github.io/github-actions-demo/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Page"),s("OutboundLink")],1),t._v("，会看到构建成果已经发上网了。\n"),s("img",{attrs:{src:t.$withBase("/img/gitAction/gitAction5.png")}}),t._v("\n以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。")]),t._v(" "),s("h2",{attrs:{id:"五、其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、其他"}},[t._v("#")]),t._v(" 五、其他")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("   由于vuepress中的静态图片都是存储在七牛云上，通过http url获取，但是git pages站点是https认证的，当通过chrome访问时，默认会将图片的请求转为https，所以图片会无法访问（safari浏览器没有这个问题），所以需要将七牛云的加速域名开启https认证。阿里云可以申请免费ssl证书。\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);