(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{536:function(t,a,e){"use strict";e.r(a);var n=e(5),l=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"线程的生命周期状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程的生命周期状态"}},[t._v("#")]),t._v(" 线程的生命周期状态：")]),t._v(" "),e("p",[t._v("java5以后线程状态被明确定义在公共内部枚举类型java.lang.Thread.State中")]),t._v(" "),e("ul",[e("li",[t._v("新建（NEW），表示线程被创建出来还没真正启动的状态，可以认为它是个Java内部状态。")]),t._v(" "),e("li",[t._v("就绪（RUNNABLE），表示该线程已经在JVM中执行，当然由于执行需要计算资源，它可能是正在运行，也可能还在等待系统分配给它CPU片段，在就绪队列里面排队。")]),t._v(" "),e("li",[t._v("在其他一些分析中，会额外区分一种状态RUNNING，但是从Java API的角度，并不能表示出来。")]),t._v(" "),e("li",[t._v("阻塞（BLOCKED），这个状态和我们前面两讲介绍的同步非常相关，阻塞表示线程在等待Monitor lock。比如，线程试图通过synchronized去获取某个锁，但是其他线程已经独占了，那么当前线程就会处于阻塞状态。")])])])}),[],!1,null,null,null);a.default=l.exports}}]);