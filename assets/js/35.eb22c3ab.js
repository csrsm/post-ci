(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{539:function(e,t,r){"use strict";r.r(t);var a=r(5),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("Web开发")]),e._v(" "),r("h1",{attrs:{id:"springboot2核心技术-核心功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springboot2核心技术-核心功能"}},[e._v("#")]),e._v(" SpringBoot2核心技术-核心功能")]),e._v(" "),r("h1",{attrs:{id:"web开发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#web开发"}},[e._v("#")]),e._v(" Web开发")]),e._v(" "),r("p",[r("img",{attrs:{src:"C:%5CUsers%5Ccm%5CAppData%5CLocal%5CTemp%5C1614172549896.png",alt:"1614172549896"}})]),e._v(" "),r("h2",{attrs:{id:"_1、springmvc自动配置概览"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、springmvc自动配置概览"}},[e._v("#")]),e._v(" 1、SpringMVC自动配置概览")]),e._v(" "),r("p",[e._v("Spring Boot provides auto-configuration for Spring MVC that "),r("strong",[e._v("works well with most applications.(大多场景我们都无需自定义配置)")])]),e._v(" "),r("p",[e._v("The auto-configuration adds the following features on top of Spring’s defaults:")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("Inclusion of "),r("code",[e._v("ContentNegotiatingViewResolver")]),e._v(" and "),r("code",[e._v("BeanNameViewResolver")]),e._v(" beans.")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("内容协商视图解析器和BeanName视图解析器")])])]),e._v(" "),r("li",[r("p",[e._v("Support for serving static resources, including support for WebJars (covered "),r("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content",target:"_blank",rel:"noopener noreferrer"}},[e._v("later in this document"),r("OutboundLink")],1),e._v(")).")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("静态资源（包括webjars）")])])]),e._v(" "),r("li",[r("p",[e._v("Automatic registration of "),r("code",[e._v("Converter")]),e._v(", "),r("code",[e._v("GenericConverter")]),e._v(", and "),r("code",[e._v("Formatter")]),e._v(" beans.")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("自动注册 "),r("code",[e._v("Converter，GenericConverter，Formatter")])])])]),e._v(" "),r("li",[r("p",[e._v("Support for "),r("code",[e._v("HttpMessageConverters")]),e._v(" (covered "),r("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters",target:"_blank",rel:"noopener noreferrer"}},[e._v("later in this document"),r("OutboundLink")],1),e._v(").")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("支持 "),r("code",[e._v("HttpMessageConverters")]),e._v(" （后来我们配合内容协商理解原理）")])])]),e._v(" "),r("li",[r("p",[e._v("Automatic registration of "),r("code",[e._v("MessageCodesResolver")]),e._v(" (covered "),r("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes",target:"_blank",rel:"noopener noreferrer"}},[e._v("later in this document"),r("OutboundLink")],1),e._v(").")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("自动注册 "),r("code",[e._v("MessageCodesResolver")]),e._v(" （国际化用）")])])]),e._v(" "),r("li",[r("p",[e._v("Static "),r("code",[e._v("index.html")]),e._v(" support.")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("静态index.html 页支持")])])]),e._v(" "),r("li",[r("p",[e._v("Custom "),r("code",[e._v("Favicon")]),e._v(" support (covered "),r("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon",target:"_blank",rel:"noopener noreferrer"}},[e._v("later in this document"),r("OutboundLink")],1),e._v(").")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("自定义 "),r("code",[e._v("Favicon")])])])]),e._v(" "),r("li",[r("p",[e._v("Automatic use of a "),r("code",[e._v("ConfigurableWebBindingInitializer")]),e._v(" bean (covered "),r("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer",target:"_blank",rel:"noopener noreferrer"}},[e._v("later in this document"),r("OutboundLink")],1),e._v(").")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("自动使用 "),r("code",[e._v("ConfigurableWebBindingInitializer")]),e._v(" ，（DataBinder负责将请求数据绑定到JavaBean上）")])])])]),e._v(" "),r("blockquote",[r("p",[e._v("If you want to keep those Spring Boot MVC customizations and make more "),r("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc",target:"_blank",rel:"noopener noreferrer"}},[e._v("MVC customizations"),r("OutboundLink")],1),e._v(" (interceptors, formatters, view controllers, and other features), you can add your own "),r("code",[e._v("@Configuration")]),e._v(" class of type "),r("code",[e._v("WebMvcConfigurer")]),e._v(" but "),r("strong",[e._v("without")]),e._v(" "),r("code",[e._v("@EnableWebMvc")]),e._v(".")]),e._v(" "),r("p",[r("strong",[e._v("不用@EnableWebMvc注解。使用")]),e._v(" "),r("strong",[e._v("@Configuration")]),e._v(" "),r("strong",[e._v("+")]),e._v(" "),r("strong",[e._v("WebMvcConfigurer")]),e._v(" "),r("strong",[e._v("自定义规则")])])]),e._v(" "),r("blockquote",[r("p",[e._v("If you want to provide custom instances of "),r("code",[e._v("RequestMappingHandlerMapping")]),e._v(", "),r("code",[e._v("RequestMappingHandlerAdapter")]),e._v(", or "),r("code",[e._v("ExceptionHandlerExceptionResolver")]),e._v(", and still keep the Spring Boot MVC customizations, you can declare a bean of type "),r("code",[e._v("WebMvcRegistrations")]),e._v(" and use it to provide custom instances of those components.")]),e._v(" "),r("p",[r("strong",[e._v("声明")]),e._v(" "),r("strong",[e._v("WebMvcRegistrations")]),e._v(" "),r("strong",[e._v("改变默认底层组件")])])]),e._v(" "),r("blockquote",[r("p",[e._v("If you want to take complete control of Spring MVC, you can add your own "),r("code",[e._v("@Configuration")]),e._v(" annotated with "),r("code",[e._v("@EnableWebMvc")]),e._v(", or alternatively add your own "),r("code",[e._v("@Configuration")]),e._v("-annotated "),r("code",[e._v("DelegatingWebMvcConfiguration")]),e._v(" as described in the Javadoc of "),r("code",[e._v("@EnableWebMvc")]),e._v(".")]),e._v(" "),r("p",[r("strong",[e._v("使用")]),e._v(" "),r("strong",[e._v("@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC")])])]),e._v(" "),r("h2",{attrs:{id:"_2、简单功能分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、简单功能分析"}},[e._v("#")]),e._v(" 2、简单功能分析")]),e._v(" "),r("h3",{attrs:{id:"_2-1、静态资源访问"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、静态资源访问"}},[e._v("#")]),e._v(" 2.1、静态资源访问")]),e._v(" "),r("h4",{attrs:{id:"_1、静态资源目录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、静态资源目录"}},[e._v("#")]),e._v(" 1、静态资源目录")]),e._v(" "),r("p",[e._v("只要静态资源放在类路径下： called "),r("code",[e._v("/static")]),e._v(" (or "),r("code",[e._v("/public")]),e._v(" or "),r("code",[e._v("/resources")]),e._v(" or "),r("code",[e._v("/META-INF/resources")])]),e._v(" "),r("p",[e._v("访问 ： 当前项目根路径/ + 静态资源名")]),e._v(" "),r("p",[e._v("原理： 静态映射/**。")]),e._v(" "),r("p",[e._v("请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面")]),e._v(" "),r("p",[e._v("改变默认的静态资源路径")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring:\n  mvc:\n    static-path-pattern: /res/**\n\n  resources:\n    static-locations: [classpath:/haha/]\n")])])]),r("h4",{attrs:{id:"_2、静态资源访问前缀"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、静态资源访问前缀"}},[e._v("#")]),e._v(" 2、静态资源访问前缀")]),e._v(" "),r("p",[e._v("默认无前缀")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring:\n  mvc:\n    static-path-pattern: /res/**\n")])])]),r("p",[e._v("当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找")]),e._v(" "),r("h4",{attrs:{id:"_3、webjar"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、webjar"}},[e._v("#")]),e._v(" 3、webjar")]),e._v(" "),r("p",[e._v("自动映射 /"),r("a",{attrs:{href:"http://localhost:8080/webjars/jquery/3.5.1/jquery.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("webjars"),r("OutboundLink")],1),e._v("/**")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.webjars.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.webjars.org/"),r("OutboundLink")],1)]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("        <dependency>\n            <groupId>org.webjars</groupId>\n            <artifactId>jquery</artifactId>\n            <version>3.5.1</version>\n        </dependency>\n")])])]),r("p",[e._v("访问地址："),r("a",{attrs:{href:"http://localhost:8080/webjars/jquery/3.5.1/jquery.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:8080/webjars/"),r("strong",[e._v("jquery/3.5.1/jquery.js")]),r("OutboundLink")],1),e._v("   后面地址要按照依赖里面的包路径")]),e._v(" "),r("h3",{attrs:{id:"_2-2、欢迎页支持"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、欢迎页支持"}},[e._v("#")]),e._v(" 2.2、欢迎页支持")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("静态资源路径下  index.html")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("可以配置静态资源路径")]),e._v(" "),r("li",[e._v("但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问")])])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring:\n#  mvc:\n#    static-path-pattern: /res/**   这个会导致welcome page功能失效\n\n  resources:\n    static-locations: [classpath:/haha/]\n")])])]),r("ul",[r("li",[e._v("controller能处理/index")])]),e._v(" "),r("h3",{attrs:{id:"_2-3、自定义-favicon"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、自定义-favicon"}},[e._v("#")]),e._v(" 2.3、自定义 "),r("code",[e._v("Favicon")])]),e._v(" "),r("p",[e._v("favicon.ico 放在静态资源目录下即可。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring:\n#  mvc:\n#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效\n")])])]),r("h3",{attrs:{id:"_2-4、静态资源配置原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-4、静态资源配置原理"}},[e._v("#")]),e._v(" 2.4、静态资源配置原理")]),e._v(" "),r("ul",[r("li",[e._v("SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）")]),e._v(" "),r("li",[e._v("SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@Configuration(proxyBeanMethods = false)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,\n        ValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {}\n")])])]),r("ul",[r("li",[e._v("给容器中配了什么。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("    @Configuration(proxyBeanMethods = false)\n    @Import(EnableWebMvcConfiguration.class)\n    @EnableConfigurationProperties({ WebMvcProperties.class, ResourceProperties.class })\n    @Order(0)\n    public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer {}\n")])])]),r("ul",[r("li",[e._v("配置文件的相关属性和xxx进行了绑定。WebMvcProperties=="),r("strong",[e._v("spring.mvc")]),e._v("、ResourceProperties=="),r("strong",[e._v("spring.resources")])])]),e._v(" "),r("h4",{attrs:{id:"_1、配置类只有一个有参构造器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、配置类只有一个有参构造器"}},[e._v("#")]),e._v(" 1、配置类只有一个有参构造器")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("    //有参构造器所有参数的值都会从容器中确定\n//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象\n//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象\n//ListableBeanFactory beanFactory Spring的beanFactory\n//HttpMessageConverters 找到所有的HttpMessageConverters\n//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========\n//DispatcherServletPath  \n//ServletRegistrationBean   给应用注册Servlet、Filter....\n    public WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,\n                ListableBeanFactory beanFactory, ObjectProvider<HttpMessageConverters> messageConvertersProvider,\n                ObjectProvider<ResourceHandlerRegistrationCustomizer> resourceHandlerRegistrationCustomizerProvider,\n                ObjectProvider<DispatcherServletPath> dispatcherServletPath,\n                ObjectProvider<ServletRegistrationBean<?>> servletRegistrations) {\n            this.resourceProperties = resourceProperties;\n            this.mvcProperties = mvcProperties;\n            this.beanFactory = beanFactory;\n            this.messageConvertersProvider = messageConvertersProvider;\n            this.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();\n            this.dispatcherServletPath = dispatcherServletPath;\n            this.servletRegistrations = servletRegistrations;\n        }\n")])])]),r("h4",{attrs:{id:"_2、资源处理的默认规则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、资源处理的默认规则"}},[e._v("#")]),e._v(" 2、资源处理的默认规则")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('@Override\n        public void addResourceHandlers(ResourceHandlerRegistry registry) {\n            if (!this.resourceProperties.isAddMappings()) {\n                logger.debug("Default resource handling disabled");\n                return;\n            }\n            Duration cachePeriod = this.resourceProperties.getCache().getPeriod();\n            CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();\n            //webjars的规则\n            if (!registry.hasMappingForPattern("/webjars/**")) {\n                customizeResourceHandlerRegistration(registry.addResourceHandler("/webjars/**")\n                        .addResourceLocations("classpath:/META-INF/resources/webjars/")\n                        .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n            }\n            \n            //\n            String staticPathPattern = this.mvcProperties.getStaticPathPattern();\n            if (!registry.hasMappingForPattern(staticPathPattern)) {\n                customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)\n                        .addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))\n                        .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n            }\n        }\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring:\n#  mvc:\n#    static-path-pattern: /res/**\n\n  resources:\n    add-mappings: false   禁用所有静态资源规则\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('@ConfigurationProperties(prefix = "spring.resources", ignoreUnknownFields = false)\npublic class ResourceProperties {\n\n    private static final String[] CLASSPATH_RESOURCE_LOCATIONS = { "classpath:/META-INF/resources/",\n            "classpath:/resources/", "classpath:/static/", "classpath:/public/" };\n\n    /**\n     * Locations of static resources. Defaults to classpath:[/META-INF/resources/,\n     * /resources/, /static/, /public/].\n     */\n    private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;\n')])])]),r("h4",{attrs:{id:"_3、欢迎页的处理规则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、欢迎页的处理规则"}},[e._v("#")]),e._v(" 3、欢迎页的处理规则")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。  \n\n    @Bean\n        public WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext,\n                FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider) {\n            WelcomePageHandlerMapping welcomePageHandlerMapping = new WelcomePageHandlerMapping(\n                    new TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),\n                    this.mvcProperties.getStaticPathPattern());\n            welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));\n            welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());\n            return welcomePageHandlerMapping;\n        }\n\n    WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,\n            ApplicationContext applicationContext, Optional<Resource> welcomePage, String staticPathPattern) {\n        if (welcomePage.isPresent() && "/**".equals(staticPathPattern)) {\n            //要用欢迎页功能，必须是/**\n            logger.info("Adding welcome page: " + welcomePage.get());\n            setRootViewName("forward:index.html");\n        }\n        else if (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) {\n            // 调用Controller  /index\n            logger.info("Adding welcome page template: index");\n            setRootViewName("index");\n        }\n    }\n')])])]),r("h4",{attrs:{id:"_4、favicon"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、favicon"}},[e._v("#")]),e._v(" 4、favicon")]),e._v(" "),r("h2",{attrs:{id:"_3、请求参数处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、请求参数处理"}},[e._v("#")]),e._v(" 3、请求参数处理")]),e._v(" "),r("h3",{attrs:{id:"_0、请求映射"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_0、请求映射"}},[e._v("#")]),e._v(" 0、请求映射")]),e._v(" "),r("h4",{attrs:{id:"_1、rest使用与原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、rest使用与原理"}},[e._v("#")]),e._v(" 1、rest使用与原理")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("@xxxMapping；")])]),e._v(" "),r("li",[r("p",[e._v("Rest风格支持（"),r("em",[e._v("使用"),r("strong",[e._v("HTTP")]),e._v("请求方式动词来表示对资源的操作")]),e._v("）")])]),e._v(" "),r("li",[r("ul",[r("li",[r("em",[e._v("以前：**/getUser")]),e._v(" "),r("em",[e._v("获取用户")]),e._v(" "),r("em",[e._v("/deleteUser")]),e._v(" "),r("em",[e._v("删除用户")]),e._v(" "),r("em",[e._v("/editUser")]),e._v(" "),r("em",[e._v("修改用户")]),e._v(" "),r("em",[e._v("/saveUser")]),e._v(" "),r("em",[e._v("保存用户")])]),e._v(" "),r("li",[r("em",[e._v("现在： /user")]),e._v("    *GET-*"),r("em",[e._v("获取用户")]),e._v("    *DELETE-*"),r("em",[e._v("删除用户")]),e._v("     *PUT-*"),r("em",[e._v("修改用户")]),e._v("      *POST-*"),r("em",[e._v("保存用户")])]),e._v(" "),r("li",[e._v("核心Filter；HiddenHttpMethodFilter")])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[e._v("用法： 表单method=post，隐藏域 _method=put")]),e._v(" "),r("li",[e._v("SpringBoot中手动开启")])])])])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("扩展：如何把_method 这个名字换成我们自己喜欢的。")])])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    @RequestMapping(value = "/user",method = RequestMethod.GET)\n    public String getUser(){\n        return "GET-张三";\n    }\n\n    @RequestMapping(value = "/user",method = RequestMethod.POST)\n    public String saveUser(){\n        return "POST-张三";\n    }\n\n\n    @RequestMapping(value = "/user",method = RequestMethod.PUT)\n    public String putUser(){\n        return "PUT-张三";\n    }\n\n    @RequestMapping(value = "/user",method = RequestMethod.DELETE)\n    public String deleteUser(){\n        return "DELETE-张三";\n    }\n\n\n    @Bean\n    @ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n    @ConditionalOnProperty(prefix = "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing = false)\n    public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n        return new OrderedHiddenHttpMethodFilter();\n    }\n\n\n//自定义filter\n    @Bean\n    public HiddenHttpMethodFilter hiddenHttpMethodFilter(){\n        HiddenHttpMethodFilter methodFilter = new HiddenHttpMethodFilter();\n        methodFilter.setMethodParam("_m");\n        return methodFilter;\n    }\n')])])]),r("p",[e._v("Rest原理（表单提交要使用REST的时候）")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("表单提交会带上**_method=PUT**")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("请求过来被")]),e._v("HiddenHttpMethodFilter拦截")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("请求是否正常，并且是POST")])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[e._v("获取到**_method**的值。")]),e._v(" "),r("li",[e._v("兼容以下请求；"),r("strong",[e._v("PUT")]),e._v("."),r("strong",[e._v("DELETE")]),e._v("."),r("strong",[e._v("PATCH")])]),e._v(" "),r("li",[r("strong",[e._v("原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。")])]),e._v(" "),r("li",[r("strong",[e._v("过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用****requesWrapper的。")])])])])])])]),e._v(" "),r("p",[r("strong",[e._v("Rest使用客户端工具，")])]),e._v(" "),r("ul",[r("li",[e._v("如PostMan直接发送Put、delete等方式请求，无需Filter。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true   #开启页面表单的Rest功能\n")])])]),r("h4",{attrs:{id:"_2、请求映射原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、请求映射原理"}},[e._v("#")]),e._v(" 2、请求映射原理")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181171918-b8acfb93-4914-4208-9943-b37610e93864.png",alt:"image.png"}})]),e._v(" "),r("p",[e._v("SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpServletRequest processedRequest = request;\n        HandlerExecutionChain mappedHandler = null;\n        boolean multipartRequestParsed = false;\n\n        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n        try {\n            ModelAndView mv = null;\n            Exception dispatchException = null;\n\n            try {\n                processedRequest = checkMultipart(request);\n                multipartRequestParsed = (processedRequest != request);\n\n                // 找到当前请求使用哪个Handler（Controller的方法）处理\n                mappedHandler = getHandler(processedRequest);\n                \n                //HandlerMapping：处理器映射。/xxx->>xxxx\n")])])]),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181460034-ba25f3c0-9cfd-4432-8949-3d1dd88d8b12.png",alt:"image.png"}})]),e._v(" "),r("p",[r("strong",[e._v("RequestMappingHandlerMapping")]),e._v("：保存了所有@RequestMapping 和handler的映射规则。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603181662070-9e526de8-fd78-4a02-9410-728f059d6aef.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1500",alt:"image.png"}})]),e._v(" "),r("p",[e._v("所有的请求映射都在HandlerMapping中。")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html；")])]),e._v(" "),r("li",[r("p",[e._v("SpringBoot自动配置了默认 的 RequestMappingHandlerMapping")])]),e._v(" "),r("li",[r("p",[e._v("请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("如果有就找到这个请求对应的handler")]),e._v(" "),r("li",[e._v("如果没有就是下一个 HandlerMapping")])])]),e._v(" "),r("li",[r("p",[e._v("我们需要一些自定义的映射处理，我们也可以自己给容器中放"),r("strong",[e._v("HandlerMapping")]),e._v("。自定义 "),r("strong",[e._v("HandlerMapping")])])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("    protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n        if (this.handlerMappings != null) {\n            for (HandlerMapping mapping : this.handlerMappings) {\n                HandlerExecutionChain handler = mapping.getHandler(request);\n                if (handler != null) {\n                    return handler;\n                }\n            }\n        }\n        return null;\n    }\n")])])]),r("h3",{attrs:{id:"_1、普通参数与基本注解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、普通参数与基本注解"}},[e._v("#")]),e._v(" 1、普通参数与基本注解")]),e._v(" "),r("h4",{attrs:{id:"_1-1、注解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、注解"}},[e._v("#")]),e._v(" 1.1、注解：")]),e._v(" "),r("p",[e._v("@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('@RestController\npublic class ParameterTestController {\n\n\n    //  car/2/owner/zhangsan\n    @GetMapping("/car/{id}/owner/{username}")\n    public Map<String,Object> getCar(@PathVariable("id") Integer id,\n                                     @PathVariable("username") String name,\n                                     @PathVariable Map<String,String> pv,\n                                     @RequestHeader("User-Agent") String userAgent,\n                                     @RequestHeader Map<String,String> header,\n                                     @RequestParam("age") Integer age,\n                                     @RequestParam("inters") List<String> inters,\n                                     @RequestParam Map<String,String> params,\n                                     @CookieValue("_ga") String _ga,\n                                     @CookieValue("_ga") Cookie cookie){\n\n\n        Map<String,Object> map = new HashMap<>();\n\n//        map.put("id",id);\n//        map.put("name",name);\n//        map.put("pv",pv);\n//        map.put("userAgent",userAgent);\n//        map.put("headers",header);\n        map.put("age",age);\n        map.put("inters",inters);\n        map.put("params",params);\n        map.put("_ga",_ga);\n        System.out.println(cookie.getName()+"===>"+cookie.getValue());\n        return map;\n    }\n\n\n    @PostMapping("/save")\n    public Map postMethod(@RequestBody String content){\n        Map<String,Object> map = new HashMap<>();\n        map.put("content",content);\n        return map;\n    }\n\n\n    //1、语法： 请求路径：/cars/sell;low=34;brand=byd,audi,yd\n    //2、SpringBoot默认是禁用了矩阵变量的功能\n    //      手动开启：原理。对于路径的处理。UrlPathHelper进行解析。\n    //              removeSemicolonContent（移除分号内容）支持矩阵变量的\n    //3、矩阵变量必须有url路径变量才能被解析\n    @GetMapping("/cars/{path}")\n    public Map carsSell(@MatrixVariable("low") Integer low,\n                        @MatrixVariable("brand") List<String> brand,\n                        @PathVariable("path") String path){\n        Map<String,Object> map = new HashMap<>();\n\n        map.put("low",low);\n        map.put("brand",brand);\n        map.put("path",path);\n        return map;\n    }\n\n    // /boss/1;age=20/2;age=10\n\n    @GetMapping("/boss/{bossId}/{empId}")\n    public Map boss(@MatrixVariable(value = "age",pathVar = "bossId") Integer bossAge,\n                    @MatrixVariable(value = "age",pathVar = "empId") Integer empAge){\n        Map<String,Object> map = new HashMap<>();\n\n        map.put("bossAge",bossAge);\n        map.put("empAge",empAge);\n        return map;\n\n    }\n\n}\n')])])]),r("h4",{attrs:{id:"_1-2、servlet-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、servlet-api"}},[e._v("#")]),e._v(" 1.2、Servlet API：")]),e._v(" "),r("p",[e._v("WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId")]),e._v(" "),r("p",[r("strong",[e._v("ServletRequestMethodArgumentResolver  以上的部分参数")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@Override\n    public boolean supportsParameter(MethodParameter parameter) {\n        Class<?> paramType = parameter.getParameterType();\n        return (WebRequest.class.isAssignableFrom(paramType) ||\n                ServletRequest.class.isAssignableFrom(paramType) ||\n                MultipartRequest.class.isAssignableFrom(paramType) ||\n                HttpSession.class.isAssignableFrom(paramType) ||\n                (pushBuilder != null && pushBuilder.isAssignableFrom(paramType)) ||\n                Principal.class.isAssignableFrom(paramType) ||\n                InputStream.class.isAssignableFrom(paramType) ||\n                Reader.class.isAssignableFrom(paramType) ||\n                HttpMethod.class == paramType ||\n                Locale.class == paramType ||\n                TimeZone.class == paramType ||\n                ZoneId.class == paramType);\n    }\n")])])]),r("h4",{attrs:{id:"_1-3、复杂参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3、复杂参数"}},[e._v("#")]),e._v(" 1.3、复杂参数：")]),e._v(" "),r("p",[r("strong",[e._v("Map")]),e._v("、**Model（map、model里面的数据会被放在request的请求域  request.setAttribute）、**Errors/BindingResult、"),r("strong",[e._v("RedirectAttributes（ 重定向携带数据）")]),e._v("、"),r("strong",[e._v("ServletResponse（response）")]),e._v("、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Map<String,Object> map,  Model model, HttpServletRequest request 都是可以给request域中放数据，\nrequest.getAttribute();\n")])])]),r("p",[r("strong",[e._v("Map、Model类型的参数")]),e._v("，会返回 mavContainer.getModel（）；---\x3e BindingAwareModelMap 是Model 也是Map")]),e._v(" "),r("p",[r("strong",[e._v("mavContainer")]),e._v(".getModel(); 获取到值的")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603271442869-63b4c3c7-c721-4074-987d-cbe5999273ae.png",alt:"image.png"}})]),e._v(" "),r("h3",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")]),e._v(" "),r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603271678813-d8e1a1e5-94fa-412c-a7f1-6f27174fd127.png",alt:"image.png"}})]),e._v(" "),r("h3",{attrs:{id:"-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")]),e._v(" "),r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603271813894-037be041-92a5-49af-a49c-c350b3dd587a.png",alt:"image.png"}})]),e._v(" "),r("h4",{attrs:{id:"_1-4、自定义对象参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-4、自定义对象参数"}},[e._v("#")]),e._v(" 1.4、自定义对象参数：")]),e._v(" "),r("p",[e._v("可以自动类型转换与格式化，可以级联封装。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('/**\n *     姓名： <input name="userName"/> <br/>\n *     年龄： <input name="age"/> <br/>\n *     生日： <input name="birth"/> <br/>\n *     宠物姓名：<input name="pet.name"/><br/>\n *     宠物年龄：<input name="pet.age"/>\n */\n@Data\npublic class Person {\n    \n    private String userName;\n    private Integer age;\n    private Date birth;\n    private Pet pet;\n    \n}\n\n@Data\npublic class Pet {\n\n    private String name;\n    private String age;\n\n}\n\nresult\n')])])]),r("h3",{attrs:{id:"_2、pojo封装过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、pojo封装过程"}},[e._v("#")]),e._v(" 2、POJO封装过程")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("ServletModelAttributeMethodProcessor")])])]),e._v(" "),r("h3",{attrs:{id:"_3、参数处理原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、参数处理原理"}},[e._v("#")]),e._v(" 3、参数处理原理")]),e._v(" "),r("ul",[r("li",[e._v("HandlerMapping中找到能处理请求的Handler（Controller.method()）")]),e._v(" "),r("li",[e._v("为当前Handler 找一个适配器 HandlerAdapter； "),r("strong",[e._v("RequestMappingHandlerAdapter")])]),e._v(" "),r("li",[e._v("适配器执行目标方法并确定方法参数的每一个值")])]),e._v(" "),r("h4",{attrs:{id:"_1、handleradapter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、handleradapter"}},[e._v("#")]),e._v(" 1、HandlerAdapter")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603262942726-107353bd-f8b7-44f6-93cf-2a3cad4093cf.png",alt:"image.png"}})]),e._v(" "),r("p",[e._v("0 - 支持方法上标注@RequestMapping")]),e._v(" "),r("p",[e._v("1 - 支持函数式编程的")]),e._v(" "),r("p",[e._v("xxxxxx")]),e._v(" "),r("h4",{attrs:{id:"_2、执行目标方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、执行目标方法"}},[e._v("#")]),e._v(" 2、执行目标方法")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// Actually invoke the handler.\n//DispatcherServlet -- doDispatch\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("mav = invokeHandlerMethod(request, response, handlerMethod); //执行目标方法\n\n\n//ServletInvocableHandlerMethod\nObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);\n//获取方法的参数值\nObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);\n")])])]),r("h4",{attrs:{id:"_3、参数解析器-handlermethodargumentresolver"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、参数解析器-handlermethodargumentresolver"}},[e._v("#")]),e._v(" 3、参数解析器-HandlerMethodArgumentResolver")]),e._v(" "),r("p",[e._v("确定将要执行的目标方法的每一个参数的值是什么;")]),e._v(" "),r("p",[e._v("SpringMVC目标方法能写多少种参数类型。取决于参数解析器。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603263283504-85bbd4d5-a9af-4dbf-b6a2-30b409868774.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603263394724-33122714-9d06-42ec-bf45-e440e8b49c05.png",alt:"image.png"}})]),e._v(" "),r("ul",[r("li",[e._v("当前解析器是否支持解析这种参数")]),e._v(" "),r("li",[e._v("支持就调用 resolveArgument")])]),e._v(" "),r("h3",{attrs:{id:"_4、返回值处理器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、返回值处理器"}},[e._v("#")]),e._v(" 4、返回值处理器")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603263524227-386da4be-43b1-4b17-a2cc-8cf886346af9.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("h3",{attrs:{id:"_5、如何确定目标方法每一个参数的值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、如何确定目标方法每一个参数的值"}},[e._v("#")]),e._v(" 5、如何确定目标方法每一个参数的值")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('============InvocableHandlerMethod==========================\nprotected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n            Object... providedArgs) throws Exception {\n\n        MethodParameter[] parameters = getMethodParameters();\n        if (ObjectUtils.isEmpty(parameters)) {\n            return EMPTY_ARGS;\n        }\n\n        Object[] args = new Object[parameters.length];\n        for (int i = 0; i < parameters.length; i++) {\n            MethodParameter parameter = parameters[i];\n            parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);\n            args[i] = findProvidedArgument(parameter, providedArgs);\n            if (args[i] != null) {\n                continue;\n            }\n            if (!this.resolvers.supportsParameter(parameter)) {\n                throw new IllegalStateException(formatArgumentError(parameter, "No suitable resolver"));\n            }\n            try {\n                args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);\n            }\n            catch (Exception ex) {\n                // Leave stack trace for later, exception may actually be resolved and handled...\n                if (logger.isDebugEnabled()) {\n                    String exMsg = ex.getMessage();\n                    if (exMsg != null && !exMsg.contains(parameter.getExecutable().toGenericString())) {\n                        logger.debug(formatArgumentError(parameter, exMsg));\n                    }\n                }\n                throw ex;\n            }\n        }\n        return args;\n    }\n')])])]),r("h4",{attrs:{id:"_5-1、挨个判断所有参数解析器那个支持解析这个参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1、挨个判断所有参数解析器那个支持解析这个参数"}},[e._v("#")]),e._v(" 5.1、挨个判断所有参数解析器那个支持解析这个参数")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("    @Nullable\n    private HandlerMethodArgumentResolver getArgumentResolver(MethodParameter parameter) {\n        HandlerMethodArgumentResolver result = this.argumentResolverCache.get(parameter);\n        if (result == null) {\n            for (HandlerMethodArgumentResolver resolver : this.argumentResolvers) {\n                if (resolver.supportsParameter(parameter)) {\n                    result = resolver;\n                    this.argumentResolverCache.put(parameter, result);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n")])])]),r("h4",{attrs:{id:"_5-2、解析这个参数的值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-2、解析这个参数的值"}},[e._v("#")]),e._v(" 5.2、解析这个参数的值")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("调用各自 HandlerMethodArgumentResolver 的 resolveArgument 方法即可\n")])])]),r("h4",{attrs:{id:"_5-3、自定义类型参数-封装pojo"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-3、自定义类型参数-封装pojo"}},[e._v("#")]),e._v(" 5.3、自定义类型参数 封装POJO")]),e._v(" "),r("p",[r("strong",[e._v("ServletModelAttributeMethodProcessor  这个参数处理器支持")])]),e._v(" "),r("p",[r("strong",[e._v("是否为简单类型。")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("public static boolean isSimpleValueType(Class<?> type) {\n        return (Void.class != type && void.class != type &&\n                (ClassUtils.isPrimitiveOrWrapper(type) ||\n                Enum.class.isAssignableFrom(type) ||\n                CharSequence.class.isAssignableFrom(type) ||\n                Number.class.isAssignableFrom(type) ||\n                Date.class.isAssignableFrom(type) ||\n                Temporal.class.isAssignableFrom(type) ||\n                URI.class == type ||\n                URL.class == type ||\n                Locale.class == type ||\n                Class.class == type));\n    }\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('@Override\n    @Nullable\n    public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n            NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {\n\n        Assert.state(mavContainer != null, "ModelAttributeMethodProcessor requires ModelAndViewContainer");\n        Assert.state(binderFactory != null, "ModelAttributeMethodProcessor requires WebDataBinderFactory");\n\n        String name = ModelFactory.getNameForParameter(parameter);\n        ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);\n        if (ann != null) {\n            mavContainer.setBinding(name, ann.binding());\n        }\n\n        Object attribute = null;\n        BindingResult bindingResult = null;\n\n        if (mavContainer.containsAttribute(name)) {\n            attribute = mavContainer.getModel().get(name);\n        }\n        else {\n            // Create attribute instance\n            try {\n                attribute = createAttribute(name, parameter, binderFactory, webRequest);\n            }\n            catch (BindException ex) {\n                if (isBindExceptionRequired(parameter)) {\n                    // No BindingResult parameter -> fail with BindException\n                    throw ex;\n                }\n                // Otherwise, expose null/empty value and associated BindingResult\n                if (parameter.getParameterType() == Optional.class) {\n                    attribute = Optional.empty();\n                }\n                bindingResult = ex.getBindingResult();\n            }\n        }\n\n        if (bindingResult == null) {\n            // Bean property binding and validation;\n            // skipped in case of binding failure on construction.\n            WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);\n            if (binder.getTarget() != null) {\n                if (!mavContainer.isBindingDisabled(name)) {\n                    bindRequestParameters(binder, webRequest);\n                }\n                validateIfApplicable(binder, parameter);\n                if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {\n                    throw new BindException(binder.getBindingResult());\n                }\n            }\n            // Value type adaptation, also covering java.util.Optional\n            if (!parameter.getParameterType().isInstance(attribute)) {\n                attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);\n            }\n            bindingResult = binder.getBindingResult();\n        }\n\n        // Add resolved attribute and BindingResult at the end of the model\n        Map<String, Object> bindingResultModel = bindingResult.getModel();\n        mavContainer.removeAttributes(bindingResultModel);\n        mavContainer.addAllAttributes(bindingResultModel);\n\n        return attribute;\n    }\n')])])]),r("h3",{attrs:{id:"-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[e._v("#")])]),e._v(" "),r("p",[r("strong",[e._v("WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);")])]),e._v(" "),r("p",[r("strong",[e._v("WebDataBinder :web数据绑定器，将请求参数的值绑定到指定的JavaBean里面")])]),e._v(" "),r("p",[r("strong",[e._v("WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到JavaBean中")])]),e._v(" "),r("p",[r("strong",[e._v("GenericConversionService：在设置每一个值的时候，找它里面的所有converter那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型（JavaBean -- Integer）")])]),e._v(" "),r("p",[r("strong",[e._v("byte -- > file")])]),e._v(" "),r("p",[e._v("@FunctionalInterface"),r("strong",[e._v("public interface")]),e._v(" Converter<S, T>")]),e._v(" "),r("h3",{attrs:{id:"-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[e._v("#")]),e._v(" "),r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603337871521-25fc1aa1-133a-4ce0-a146-d565633d7658.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603338486441-9bbd22a9-813f-49bd-b51b-e66c7f4b8598.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1500",alt:"image.png"}})]),e._v(" "),r("p",[e._v("未来我们可以给WebDataBinder里面放自己的Converter；")]),e._v(" "),r("p",[r("strong",[e._v("private static final class")]),e._v(" StringToNumber<T "),r("strong",[e._v("extends")]),e._v(" Number> "),r("strong",[e._v("implements")]),e._v(" Converter<String, T>")]),e._v(" "),r("p",[e._v("自定义 Converter")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    //1、WebMvcConfigurer定制化SpringMVC的功能\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer(){\n        return new WebMvcConfigurer() {\n            @Override\n            public void configurePathMatch(PathMatchConfigurer configurer) {\n                UrlPathHelper urlPathHelper = new UrlPathHelper();\n                // 不移除；后面的内容。矩阵变量功能就可以生效\n                urlPathHelper.setRemoveSemicolonContent(false);\n                configurer.setUrlPathHelper(urlPathHelper);\n            }\n\n            @Override\n            public void addFormatters(FormatterRegistry registry) {\n                registry.addConverter(new Converter<String, Pet>() {\n\n                    @Override\n                    public Pet convert(String source) {\n                        // 啊猫,3\n                        if(!StringUtils.isEmpty(source)){\n                            Pet pet = new Pet();\n                            String[] split = source.split(",");\n                            pet.setName(split[0]);\n                            pet.setAge(Integer.parseInt(split[1]));\n                            return pet;\n                        }\n                        return null;\n                    }\n                });\n            }\n        };\n    }\n')])])]),r("h3",{attrs:{id:"_6、目标方法执行完成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、目标方法执行完成"}},[e._v("#")]),e._v(" 6、目标方法执行完成")]),e._v(" "),r("p",[e._v("将所有的数据都放在 "),r("strong",[e._v("ModelAndViewContainer")]),e._v("；包含要去的页面地址View。还包含Model数据。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1603272018605-1bce3142-bdd9-4834-a028-c753e91c52ac.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("h3",{attrs:{id:"_7、处理派发结果"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、处理派发结果"}},[e._v("#")]),e._v(" 7、处理派发结果")]),e._v(" "),r("p",[r("strong",[e._v("processDispatchResult")]),e._v("(processedRequest, response, mappedHandler, mv, dispatchException);")]),e._v(" "),r("p",[e._v("renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('InternalResourceView：\n@Override\n    protected void renderMergedOutputModel(\n            Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n\n        // Expose the model object as request attributes.\n        exposeModelAsRequestAttributes(model, request);\n\n        // Expose helpers as request attributes, if any.\n        exposeHelpers(request);\n\n        // Determine the path for the request dispatcher.\n        String dispatcherPath = prepareForRendering(request, response);\n\n        // Obtain a RequestDispatcher for the target resource (typically a JSP).\n        RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);\n        if (rd == null) {\n            throw new ServletException("Could not get RequestDispatcher for [" + getUrl() +\n                    "]: Check that the corresponding file exists within your web application archive!");\n        }\n\n        // If already included or response already committed, perform include, else forward.\n        if (useInclude(request, response)) {\n            response.setContentType(getContentType());\n            if (logger.isDebugEnabled()) {\n                logger.debug("Including [" + getUrl() + "]");\n            }\n            rd.include(request, response);\n        }\n\n        else {\n            // Note: The forwarded resource is supposed to determine the content type itself.\n            if (logger.isDebugEnabled()) {\n                logger.debug("Forwarding to [" + getUrl() + "]");\n            }\n            rd.forward(request, response);\n        }\n    }\n')])])]),r("h1",{attrs:{id:"-5"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-5"}},[e._v("#")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("暴露模型作为请求域属性\n// Expose the model object as request attributes.\n        exposeModelAsRequestAttributes(model, request);\n")])])]),r("h1",{attrs:{id:"-6"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-6"}},[e._v("#")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("protected void exposeModelAsRequestAttributes(Map<String, Object> model,\n            HttpServletRequest request) throws Exception {\n\n    //model中的所有数据遍历挨个放在请求域中\n        model.forEach((name, value) -> {\n            if (value != null) {\n                request.setAttribute(name, value);\n            }\n            else {\n                request.removeAttribute(name);\n            }\n        });\n    }\n")])])]),r("h2",{attrs:{id:"_4、数据响应与内容协商"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、数据响应与内容协商"}},[e._v("#")]),e._v(" 4、数据响应与内容协商")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043749073-2573e24a-9ea9-459e-ad94-a433e1082624.png",alt:"img"}})]),e._v(" "),r("h3",{attrs:{id:"_1、响应json"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、响应json"}},[e._v("#")]),e._v(" 1、响应JSON")]),e._v(" "),r("h4",{attrs:{id:"_1-1、jackson-jar-responsebody"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、jackson-jar-responsebody"}},[e._v("#")]),e._v(" 1.1、jackson.jar+@ResponseBody")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\nweb场景自动引入了json场景\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-json</artifactId>\n      <version>2.3.4.RELEASE</version>\n      <scope>compile</scope>\n    </dependency>\n")])])]),r("h3",{attrs:{id:"-7"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-7"}},[e._v("#")]),e._v(" "),r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151090728-f7c60e6f-d0c0-4541-bfa3-8cc805dfd5d6.png",alt:"image.png"}})]),e._v(" "),r("p",[e._v("给前端自动返回json数据；")]),e._v(" "),r("h5",{attrs:{id:"_1、返回值解析器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、返回值解析器"}},[e._v("#")]),e._v(" 1、返回值解析器")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151359370-01cd1fbe-628a-4eea-9430-d79a78f59125.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("try {\n            this.returnValueHandlers.handleReturnValue(\n                    returnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n        }\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    @Override\n    public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n            ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n\n        HandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);\n        if (handler == null) {\n            throw new IllegalArgumentException("Unknown return value type: " + returnType.getParameterType().getName());\n        }\n        handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);\n    }\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("RequestResponseBodyMethodProcessor      \n@Override\n    public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n        mavContainer.setRequestHandled(true);\n        ServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n        ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);\n\n        // Try even with null return value. ResponseBodyAdvice could get involved.\n        // 使用消息转换器进行写出操作\n        writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n    }\n")])])]),r("h5",{attrs:{id:"_2、返回值解析器原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、返回值解析器原理"}},[e._v("#")]),e._v(" 2、返回值解析器原理")]),e._v(" "),r("h3",{attrs:{id:"-8"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-8"}},[e._v("#")]),e._v(" "),r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151728659-68c8ce8a-1b2b-4ab0-b86d-c3a875184672.png",alt:"image.png"}})]),e._v(" "),r("ul",[r("li",[r("p",[e._v("1、返回值处理器判断是否支持这种类型返回值 supportsReturnType")])]),e._v(" "),r("li",[r("p",[e._v("2、返回值处理器调用 handleReturnValue 进行处理")])]),e._v(" "),r("li",[r("p",[e._v("3、RequestResponseBodyMethodProcessor 可以处理返回值标了@ResponseBody 注解的。")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("\\1.  利用 MessageConverters 进行处理 将数据写为json")])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[e._v("1、内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）")]),e._v(" "),r("li",[e._v("2、服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据，")]),e._v(" "),r("li",[e._v("3、SpringMVC会挨个遍历所有容器底层的 HttpMessageConverter ，看谁能处理？")])])])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[r("ul",[r("li",[e._v("1、得到MappingJackson2HttpMessageConverter可以将对象写为json")]),e._v(" "),r("li",[e._v("2、利用MappingJackson2HttpMessageConverter将对象转为json再写出去。")])])])])])])])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163005521-a20d1d8e-0494-43d0-8135-308e7a22e896.png",alt:"image.png"}})]),e._v(" "),r("h4",{attrs:{id:"_1-2、springmvc到底支持哪些返回值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、springmvc到底支持哪些返回值"}},[e._v("#")]),e._v(" 1.2、SpringMVC到底支持哪些返回值")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("ModelAndView\nModel\nView\nResponseEntity \nResponseBodyEmitter\nStreamingResponseBody\nHttpEntity\nHttpHeaders\nCallable\nDeferredResult\nListenableFuture\nCompletionStage\nWebAsyncTask\n有 @ModelAttribute 且为对象类型的\n@ResponseBody 注解 ---\x3e RequestResponseBodyMethodProcessor；\n")])])]),r("h4",{attrs:{id:"_1-3、httpmessageconverter原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3、httpmessageconverter原理"}},[e._v("#")]),e._v(" 1.3、HTTPMessageConverter原理")]),e._v(" "),r("h5",{attrs:{id:"_1、messageconverter规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、messageconverter规范"}},[e._v("#")]),e._v(" 1、MessageConverter规范")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163447900-e2748217-0f31-4abb-9cce-546b4d790d0b.png",alt:"image.png"}})]),e._v(" "),r("p",[e._v("HttpMessageConverter: 看是否支持将 此 Class类型的对象，转为MediaType类型的数据。")]),e._v(" "),r("p",[e._v("例子：Person对象转为JSON。或者 JSON转为Person")]),e._v(" "),r("h5",{attrs:{id:"_2、默认的messageconverter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、默认的messageconverter"}},[e._v("#")]),e._v(" 2、默认的MessageConverter")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163584708-e19770d6-6b35-4caa-bf21-266b73cb1ef1.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("p",[e._v("0 - 只支持Byte类型的")]),e._v(" "),r("p",[e._v("1 - String")]),e._v(" "),r("p",[e._v("2 - String")]),e._v(" "),r("p",[e._v("3 - Resource")]),e._v(" "),r("p",[e._v("4 - ResourceRegion")]),e._v(" "),r("p",[e._v("5 - DOMSource.*"),r("em",[e._v("class *")]),e._v(" SAXSource."),r("strong",[e._v("class")]),e._v(") \\ StAXSource.**class **StreamSource.**class **Source."),r("strong",[e._v("class")])]),e._v(" "),r("p",[r("strong",[e._v("6 -")]),e._v(" MultiValueMap")]),e._v(" "),r("p",[e._v("7 - "),r("strong",[e._v("true")])]),e._v(" "),r("p",[r("strong",[e._v("8 - true")])]),e._v(" "),r("p",[r("strong",[e._v("9 - 支持注解方式xml处理的。")])]),e._v(" "),r("p",[e._v("最终 MappingJackson2HttpMessageConverter  把对象转为JSON（利用底层的jackson的objectMapper转换的）")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605164243168-1a31e9af-54a4-463e-b65a-c28ca7a8a2fa.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("h3",{attrs:{id:"_2、内容协商"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、内容协商"}},[e._v("#")]),e._v(" 2、内容协商")]),e._v(" "),r("p",[e._v("根据客户端接收能力不同，返回不同媒体类型的数据。")]),e._v(" "),r("h4",{attrs:{id:"_1、引入xml依赖"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、引入xml依赖"}},[e._v("#")]),e._v(" 1、引入xml依赖")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" <dependency>\n            <groupId>com.fasterxml.jackson.dataformat</groupId>\n            <artifactId>jackson-dataformat-xml</artifactId>\n</dependency>\n")])])]),r("h4",{attrs:{id:"_2、postman分别测试返回json和xml"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、postman分别测试返回json和xml"}},[e._v("#")]),e._v(" 2、postman分别测试返回json和xml")]),e._v(" "),r("p",[e._v("只需要改变请求头中Accept字段。Http协议中规定的，告诉服务器本客户端可以接收的数据类型。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173127653-8a06cd0f-b8e1-4e22-9728-069b942eba3f.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("h4",{attrs:{id:"_3、开启浏览器参数方式内容协商功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、开启浏览器参数方式内容协商功能"}},[e._v("#")]),e._v(" 3、开启浏览器参数方式内容协商功能")]),e._v(" "),r("p",[e._v("为了方便内容协商，开启基于请求参数的内容协商功能。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring:\n    contentnegotiation:\n      favor-parameter: true  #开启请求参数内容协商模式\n")])])]),r("p",[e._v("发请求： "),r("a",{attrs:{href:"http://localhost:8080/test/person?format=json",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:8080/test/person?format=json"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"http://localhost:8080/test/person?format=json",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:8080/test/person?format="),r("OutboundLink")],1),e._v("xml")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605230907471-b0ed34bc-6782-40e7-84b7-615726312f01.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("p",[e._v("确定客户端接收什么样的内容类型；")]),e._v(" "),r("p",[e._v("1、Parameter策略优先确定是要返回json数据（获取请求头中的format的值）")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605231074299-25f5b062-2de1-4a09-91bf-11e018d6ec0e.png",alt:"image.png"}})]),e._v(" "),r("p",[e._v("2、最终进行内容协商返回给客户端json即可。")]),e._v(" "),r("h4",{attrs:{id:"_4、内容协商原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、内容协商原理"}},[e._v("#")]),e._v(" 4、内容协商原理")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("1、判断当前响应头中是否已经有确定的媒体类型。MediaType")])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("2、获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段）【application/xml】")])])]),e._v(" "),r("li",[r("ul",[r("li",[r("strong",[e._v("contentNegotiationManager 内容协商管理器 默认使用基于请求头的策略")])]),e._v(" "),r("li",[r("strong",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605230462280-ef98de47-6717-4e27-b4ec-3eb0690b55d0.png",alt:"image.png"}})])]),e._v(" "),r("li",[r("strong",[e._v("HeaderContentNegotiationStrategy  确定客户端可以接收的内容类型")])]),e._v(" "),r("li",[r("strong",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605230546376-65dcf657-7653-4a58-837a-f5657778201a.png",alt:"image.png"}})])])])]),e._v(" "),r("li",[r("p",[e._v("3、遍历循环所有当前系统的 "),r("strong",[e._v("MessageConverter")]),e._v("，看谁支持操作这个对象（Person）")])]),e._v(" "),r("li",[r("p",[e._v("4、找到支持操作Person的converter，把converter支持的媒体类型统计出来。")])]),e._v(" "),r("li",[r("p",[e._v("5、客户端需要【application/xml】。服务端能力【10种、json、xml】")])]),e._v(" "),r("li",[r("p",[e._v("​    "),r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173876646-f63575e2-50c8-44d5-9603-c2d11a78adae.png",alt:"image.png"}})])]),e._v(" "),r("li",[r("p",[e._v("6、进行内容协商的最佳匹配媒体类型")])]),e._v(" "),r("li",[r("p",[e._v("7、用 支持 将对象转为 最佳匹配媒体类型 的converter。调用它进行转化 。")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173657818-73331882-6086-490c-973b-af46ccf07b32.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("p",[e._v("导入了jackson处理xml的包，xml的converter就会自动进来")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('WebMvcConfigurationSupport\njackson2XmlPresent = ClassUtils.isPresent("com.fasterxml.jackson.dataformat.xml.XmlMapper", classLoader);\n\nif (jackson2XmlPresent) {\n            Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.xml();\n            if (this.applicationContext != null) {\n                builder.applicationContext(this.applicationContext);\n            }\n            messageConverters.add(new MappingJackson2XmlHttpMessageConverter(builder.build()));\n        }\n')])])]),r("h4",{attrs:{id:"_5、自定义-messageconverter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、自定义-messageconverter"}},[e._v("#")]),e._v(" 5、自定义 MessageConverter")]),e._v(" "),r("p",[r("strong",[e._v("实现多协议数据兼容。json、xml、x-guigu")])]),e._v(" "),r("p",[r("strong",[e._v("0、")]),e._v("@ResponseBody 响应数据出去 调用 "),r("strong",[e._v("RequestResponseBodyMethodProcessor")]),e._v(" 处理")]),e._v(" "),r("p",[e._v("1、Processor 处理方法返回值。通过 "),r("strong",[e._v("MessageConverter")]),e._v(" 处理")]),e._v(" "),r("p",[e._v("2、所有 "),r("strong",[e._v("MessageConverter")]),e._v(" 合起来可以支持各种媒体类型数据的操作（读、写）")]),e._v(" "),r("p",[e._v("3、内容协商找到最终的 "),r("strong",[e._v("messageConverter")]),e._v("；")]),e._v(" "),r("p",[e._v("SpringMVC的什么功能。一个入口给容器中添加一个  WebMvcConfigurer")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v(" @Bean\n    public WebMvcConfigurer webMvcConfigurer(){\n        return new WebMvcConfigurer() {\n\n            @Override\n            public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n\n            }\n        }\n    }\n")])])]),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605260623995-8b1f7cec-9713-4f94-9cf1-8dbc496bd245.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605261062877-0a27cc41-51cb-4018-a9af-4e0338a247cd.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("p",[r("strong",[e._v("有可能我们添加的自定义的功能会覆盖默认很多功能，导致一些默认的功能失效。")])]),e._v(" "),r("p",[r("strong",[e._v("大家考虑，上述功能除了我们完全自定义外？SpringBoot有没有为我们提供基于配置文件的快速修改媒体类型功能？怎么配置呢？【提示：参照SpringBoot官方文档web开发内容协商章节】")])]),e._v(" "),r("h2",{attrs:{id:"_5、视图解析与模板引擎"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、视图解析与模板引擎"}},[e._v("#")]),e._v(" 5、视图解析与模板引擎")]),e._v(" "),r("p",[e._v("视图解析："),r("strong",[e._v("SpringBoot默认不支持 JSP，需要引入第三方模板引擎技术实现页面渲染。")])]),e._v(" "),r("h3",{attrs:{id:"_1、视图解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、视图解析"}},[e._v("#")]),e._v(" 1、视图解析")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043749039-cefbf687-4feb-441d-bad8-c6d933248d3c.png",alt:"img"}})]),e._v(" "),r("h4",{attrs:{id:"_1、视图解析原理流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、视图解析原理流程"}},[e._v("#")]),e._v(" 1、视图解析原理流程")]),e._v(" "),r("p",[e._v("1、目标方法处理的过程中，所有数据都会被放在 "),r("strong",[e._v("ModelAndViewContainer 里面。包括数据和视图地址")])]),e._v(" "),r("p",[r("strong",[e._v("2、方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在")]),e._v(" "),r("strong",[e._v("ModelAndViewContainer")])]),e._v(" "),r("p",[r("strong",[e._v("3、任何目标方法执行完成以后都会返回 ModelAndView（"),r("strong",[r("strong",[e._v("数据和视图地址")])]),e._v("）。")])]),e._v(" "),r("p",[e._v("**4、**"),r("strong",[e._v("processDispatchResult  处理派发结果（页面改如何响应）")])]),e._v(" "),r("ul",[r("li",[r("p",[e._v("1、"),r("strong",[e._v("render")]),e._v("("),r("strong",[e._v("mv")]),e._v(", request, response); 进行页面渲染逻辑")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("1、根据方法的String返回值得到 "),r("strong",[e._v("View")]),e._v(" 对象【定义了页面的渲染逻辑】")])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[e._v("1、所有的视图解析器尝试是否能根据当前返回值得到"),r("strong",[e._v("View")]),e._v("对象")]),e._v(" "),r("li",[e._v("2、得到了  "),r("strong",[e._v("redirect:/main.html")]),e._v(" --\x3e Thymeleaf new "),r("strong",[e._v("RedirectView")]),e._v("()")]),e._v(" "),r("li",[e._v("3、ContentNegotiationViewResolver 里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象。")]),e._v(" "),r("li",[e._v("4、view.render(mv.getModelInternal(), request, response);   视图对象调用自定义的render进行页面渲染工作")])])])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[r("ul",[r("li",[r("strong",[e._v("RedirectView 如何渲染【重定向到一个页面】")])]),e._v(" "),r("li",[r("strong",[e._v("1、获取目标url地址")])]),e._v(" "),r("li",[e._v("**2、**"),r("strong",[e._v("response.sendRedirect(encodedURL);")])])])])])])])])]),e._v(" "),r("p",[r("strong",[e._v("视图解析：")])]),e._v(" "),r("ul",[r("li",[r("ul",[r("li",[r("strong",[e._v("返回值以 forward: 开始： new InternalResourceView(forwardUrl); --\x3e  转发****request.getRequestDispatcher(path).forward(request, response);")])]),e._v(" "),r("li",[r("strong",[e._v("返回值以")]),e._v(" "),r("strong",[e._v("redirect: 开始：")]),e._v(" "),r("strong",[e._v("new RedirectView() --》 render就是重定向")])]),e._v(" "),r("li",[r("strong",[e._v("返回值是普通字符串： new ThymeleafView（）---\x3e")])])])])]),e._v(" "),r("p",[e._v("自定义视图解析器+自定义视图； "),r("strong",[e._v("大厂学院。")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605680247945-088b0f17-185c-490b-8889-103e8b4d8c07.png",alt:"image.png"}})]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679959020-54b96fe7-f2fc-4b4d-a392-426e1d5413de.png",alt:"image.png"}})]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679471537-7db702dc-b165-4dc6-b64a-26459ee5fd6c.png",alt:"image.png"}})]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679913592-151a616a-c754-4da3-a2c1-91dc0230a48d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("h4",{attrs:{id:"_2、模板引擎-thymeleaf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、模板引擎-thymeleaf"}},[e._v("#")]),e._v(" 2、模板引擎-Thymeleaf")]),e._v(" "),r("h5",{attrs:{id:"_1、thymeleaf简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、thymeleaf简介"}},[e._v("#")]),e._v(" 1、thymeleaf简介")]),e._v(" "),r("p",[e._v("Thymeleaf is a modern server-side Java template engine for both web and standalone environments, capable of processing HTML, XML, JavaScript, CSS and even plain text.")]),e._v(" "),r("p",[r("strong",[e._v("现代化、服务端Java模板引擎")])]),e._v(" "),r("h5",{attrs:{id:"_2、基本语法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、基本语法"}},[e._v("#")]),e._v(" 2、基本语法")]),e._v(" "),r("h6",{attrs:{id:"_1、表达式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、表达式"}},[e._v("#")]),e._v(" 1、表达式")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("表达式名字")]),e._v(" "),r("th",[e._v("语法")]),e._v(" "),r("th",[e._v("用途")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("变量取值")]),e._v(" "),r("td",[e._v("${...}")]),e._v(" "),r("td",[e._v("获取请求域、session域、对象等值")])]),e._v(" "),r("tr",[r("td",[e._v("选择变量")]),e._v(" "),r("td",[e._v("*{...}")]),e._v(" "),r("td",[e._v("获取上下文对象值")])]),e._v(" "),r("tr",[r("td",[e._v("消息")]),e._v(" "),r("td",[e._v("#{...}")]),e._v(" "),r("td",[e._v("获取国际化等值")])]),e._v(" "),r("tr",[r("td",[e._v("链接")]),e._v(" "),r("td",[e._v("@{...}")]),e._v(" "),r("td",[e._v("生成链接")])]),e._v(" "),r("tr",[r("td",[e._v("片段表达式")]),e._v(" "),r("td",[e._v("~{...}")]),e._v(" "),r("td",[e._v("jsp:include 作用，引入公共页面片段")])])])]),e._v(" "),r("h6",{attrs:{id:"_2、字面量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、字面量"}},[e._v("#")]),e._v(" 2、字面量")]),e._v(" "),r("p",[e._v("文本值: "),r("strong",[e._v("'one text'")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("'Another one!'")]),e._v(" **,…**数字: "),r("strong",[e._v("0")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("34")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("3.0")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("12.3")]),e._v(" **,…**布尔值: "),r("strong",[e._v("true")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("false")])]),e._v(" "),r("p",[e._v("空值: "),r("strong",[e._v("null")])]),e._v(" "),r("p",[e._v("变量： one，two，.... 变量不能有空格")]),e._v(" "),r("h6",{attrs:{id:"_3、文本操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、文本操作"}},[e._v("#")]),e._v(" 3、文本操作")]),e._v(" "),r("p",[e._v("字符串拼接: "),r("strong",[e._v("+")])]),e._v(" "),r("p",[e._v("变量替换: "),r("strong",[e._v("|The name is ${name}|")])]),e._v(" "),r("h6",{attrs:{id:"_4、数学运算"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、数学运算"}},[e._v("#")]),e._v(" 4、数学运算")]),e._v(" "),r("p",[e._v("运算符: + , - , * , / , %")]),e._v(" "),r("h6",{attrs:{id:"_5、布尔运算"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、布尔运算"}},[e._v("#")]),e._v(" 5、布尔运算")]),e._v(" "),r("p",[e._v("运算符:  "),r("strong",[e._v("and")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("or")])]),e._v(" "),r("p",[e._v("一元运算: "),r("strong",[e._v("!")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("not")])]),e._v(" "),r("h6",{attrs:{id:"_6、比较运算"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、比较运算"}},[e._v("#")]),e._v(" 6、比较运算")]),e._v(" "),r("p",[e._v("比较: "),r("strong",[e._v(">")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("<")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v(">=")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("<=")]),e._v(" "),r("strong",[e._v("(")]),e._v(" "),r("strong",[e._v("gt")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("lt")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("ge")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("le")]),e._v(" **)**等式: "),r("strong",[e._v("==")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("!=")]),e._v(" "),r("strong",[e._v("(")]),e._v(" "),r("strong",[e._v("eq")]),e._v(" "),r("strong",[e._v(",")]),e._v(" "),r("strong",[e._v("ne")]),e._v(" "),r("strong",[e._v(")")])]),e._v(" "),r("h6",{attrs:{id:"_7、条件运算"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、条件运算"}},[e._v("#")]),e._v(" 7、条件运算")]),e._v(" "),r("p",[e._v("If-then: "),r("strong",[e._v("(if) ? (then)")])]),e._v(" "),r("p",[e._v("If-then-else: "),r("strong",[e._v("(if) ? (then) : (else)")])]),e._v(" "),r("p",[e._v("Default: (value) "),r("strong",[e._v("?: (defaultvalue)")])]),e._v(" "),r("h6",{attrs:{id:"_8、特殊操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8、特殊操作"}},[e._v("#")]),e._v(" 8、特殊操作")]),e._v(" "),r("p",[e._v("无操作： _")]),e._v(" "),r("h5",{attrs:{id:"_3、设置属性值-th-attr"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、设置属性值-th-attr"}},[e._v("#")]),e._v(" 3、设置属性值-th:attr")]),e._v(" "),r("p",[e._v("设置单个值")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<form action="subscribe.html" th:attr="action=@{/subscribe}">\n  <fieldset>\n    <input type="text" name="email" />\n    <input type="submit" value="Subscribe!" th:attr="value=#{subscribe.submit}"/>\n  </fieldset>\n</form>\n')])])]),r("p",[e._v("设置多个值")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<img src="../../images/gtvglogo.png"  th:attr="src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}" />\n')])])]),r("p",[e._v("以上两个的代替写法 th:xxxx")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<input type="submit" value="Subscribe!" th:value="#{subscribe.submit}"/>\n<form action="subscribe.html" th:action="@{/subscribe}">\n')])])]),r("p",[e._v("所有h5兼容的标签写法")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes"),r("OutboundLink")],1)]),e._v(" "),r("h5",{attrs:{id:"_4、迭代"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、迭代"}},[e._v("#")]),e._v(" 4、迭代")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<tr th:each="prod : ${prods}">\n        <td th:text="${prod.name}">Onions</td>\n        <td th:text="${prod.price}">2.41</td>\n        <td th:text="${prod.inStock}? #{true} : #{false}">yes</td>\n</tr>\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<tr th:each="prod,iterStat : ${prods}" th:class="${iterStat.odd}? \'odd\'">\n  <td th:text="${prod.name}">Onions</td>\n  <td th:text="${prod.price}">2.41</td>\n  <td th:text="${prod.inStock}? #{true} : #{false}">yes</td>\n</tr>\n')])])]),r("h5",{attrs:{id:"_5、条件运算"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、条件运算"}},[e._v("#")]),e._v(" 5、条件运算")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<a href="comments.html"\nth:href="@{/product/comments(prodId=${prod.id})}"\nth:if="${not #lists.isEmpty(prod.comments)}">view</a>\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<div th:switch="${user.role}">\n  <p th:case="\'admin\'">User is an administrator</p>\n  <p th:case="#{roles.manager}">User is a manager</p>\n  <p th:case="*">User is some other thing</p>\n</div>\n')])])]),r("h1",{attrs:{id:"-9"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-9"}},[e._v("#")])]),e._v(" "),r("h5",{attrs:{id:"_6、属性优先级"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、属性优先级"}},[e._v("#")]),e._v(" 6、属性优先级")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605498132699-4fae6085-a207-456c-89fa-e571ff1663da.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_1500",alt:"image.png"}})]),e._v(" "),r("h1",{attrs:{id:"-10"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-10"}},[e._v("#")])]),e._v(" "),r("h4",{attrs:{id:"_3、thymeleaf使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、thymeleaf使用"}},[e._v("#")]),e._v(" 3、thymeleaf使用")]),e._v(" "),r("h5",{attrs:{id:"_1、引入starter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、引入starter"}},[e._v("#")]),e._v(" 1、引入Starter")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n")])])]),r("h5",{attrs:{id:"_2、自动配置好了thymeleaf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、自动配置好了thymeleaf"}},[e._v("#")]),e._v(" 2、自动配置好了thymeleaf")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@Configuration(proxyBeanMethods = false)\n@EnableConfigurationProperties(ThymeleafProperties.class)\n@ConditionalOnClass({ TemplateMode.class, SpringTemplateEngine.class })\n@AutoConfigureAfter({ WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class })\npublic class ThymeleafAutoConfiguration { }\n")])])]),r("h1",{attrs:{id:"-11"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-11"}},[e._v("#")])]),e._v(" "),r("p",[e._v("自动配好的策略")]),e._v(" "),r("ul",[r("li",[e._v("1、所有thymeleaf的配置值都在 ThymeleafProperties")]),e._v(" "),r("li",[e._v("2、配置好了 "),r("strong",[e._v("SpringTemplateEngine")])]),e._v(" "),r("li",[r("strong",[e._v("3、配好了")]),e._v(" "),r("strong",[e._v("ThymeleafViewResolver")])]),e._v(" "),r("li",[e._v("4、我们只需要直接开发页面")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    public static final String DEFAULT_PREFIX = "classpath:/templates/";\n\n    public static final String DEFAULT_SUFFIX = ".html";  //xxx.html\n')])])]),r("h5",{attrs:{id:"_3、页面开发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、页面开发"}},[e._v("#")]),e._v(" 3、页面开发")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<!DOCTYPE html>\n<html lang="en" xmlns:th="http://www.thymeleaf.org">\n<head>\n    <meta charset="UTF-8">\n    <title>Title</title>\n</head>\n<body>\n<h1 th:text="${msg}">哈哈</h1>\n<h2>\n    <a href="www.atguigu.com" th:href="${link}">去百度</a>  <br/>\n    <a href="www.atguigu.com" th:href="@{link}">去百度2</a>\n</h2>\n</body>\n</html>\n')])])]),r("h4",{attrs:{id:"_4、构建后台管理系统"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、构建后台管理系统"}},[e._v("#")]),e._v(" 4、构建后台管理系统")]),e._v(" "),r("h5",{attrs:{id:"_1、项目创建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、项目创建"}},[e._v("#")]),e._v(" 1、项目创建")]),e._v(" "),r("p",[e._v("thymeleaf、web-starter、devtools、lombok")]),e._v(" "),r("h5",{attrs:{id:"_2、静态资源处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、静态资源处理"}},[e._v("#")]),e._v(" 2、静态资源处理")]),e._v(" "),r("p",[e._v("自动配置好，我们只需要把所有静态资源放到 static 文件夹下")]),e._v(" "),r("h5",{attrs:{id:"_3、路径构建"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、路径构建"}},[e._v("#")]),e._v(" 3、路径构建")]),e._v(" "),r("p",[e._v('th:action="@{/login}"')]),e._v(" "),r("h5",{attrs:{id:"_4、模板抽取"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、模板抽取"}},[e._v("#")]),e._v(" 4、模板抽取")]),e._v(" "),r("p",[e._v("th:insert/replace/include")]),e._v(" "),r("h5",{attrs:{id:"_5、页面跳转"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、页面跳转"}},[e._v("#")]),e._v(" 5、页面跳转")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    @PostMapping("/login")\n    public String main(User user, HttpSession session, Model model){\n\n        if(StringUtils.hasLength(user.getUserName()) && "123456".equals(user.getPassword())){\n            //把登陆成功的用户保存起来\n            session.setAttribute("loginUser",user);\n            //登录成功重定向到main.html;  重定向防止表单重复提交\n            return "redirect:/main.html";\n        }else {\n            model.addAttribute("msg","账号密码错误");\n            //回到登录页面\n            return "login";\n        }\n\n    }\n')])])]),r("h5",{attrs:{id:"_6、数据渲染"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、数据渲染"}},[e._v("#")]),e._v(" 6、数据渲染")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    @GetMapping("/dynamic_table")\n    public String dynamic_table(Model model){\n        //表格内容的遍历\n        List<User> users = Arrays.asList(new User("zhangsan", "123456"),\n                new User("lisi", "123444"),\n                new User("haha", "aaaaa"),\n                new User("hehe ", "aaddd"));\n        model.addAttribute("users",users);\n\n        return "table/dynamic_table";\n    }\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('        <table class="display table table-bordered" id="hidden-table-info">\n        <thead>\n        <tr>\n            <th>#</th>\n            <th>用户名</th>\n            <th>密码</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr class="gradeX" th:each="user,stats:${users}">\n            <td th:text="${stats.count}">Trident</td>\n            <td th:text="${user.userName}">Internet</td>\n            <td >[[${user.password}]]</td>\n        </tr>\n        </tbody>\n        </table>\n')])])]),r("h2",{attrs:{id:"_6、拦截器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、拦截器"}},[e._v("#")]),e._v(" 6、拦截器")]),e._v(" "),r("h3",{attrs:{id:"_1、handlerinterceptor-接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、handlerinterceptor-接口"}},[e._v("#")]),e._v(" 1、HandlerInterceptor 接口")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('/**\n * 登录检查\n * 1、配置好拦截器要拦截哪些请求\n * 2、把这些配置放在容器中\n */\n@Slf4j\npublic class LoginInterceptor implements HandlerInterceptor {\n\n    /**\n     * 目标方法执行之前\n     * @param request\n     * @param response\n     * @param handler\n     * @return\n     * @throws Exception\n     */\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n\n        String requestURI = request.getRequestURI();\n        log.info("preHandle拦截的请求路径是{}",requestURI);\n\n        //登录检查逻辑\n        HttpSession session = request.getSession();\n\n        Object loginUser = session.getAttribute("loginUser");\n\n        if(loginUser != null){\n            //放行\n            return true;\n        }\n\n        //拦截住。未登录。跳转到登录页\n        request.setAttribute("msg","请先登录");\n//        re.sendRedirect("/");\n        request.getRequestDispatcher("/").forward(request,response);\n        return false;\n    }\n\n    /**\n     * 目标方法执行完成以后\n     * @param request\n     * @param response\n     * @param handler\n     * @param modelAndView\n     * @throws Exception\n     */\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        log.info("postHandle执行{}",modelAndView);\n    }\n\n    /**\n     * 页面渲染以后\n     * @param request\n     * @param response\n     * @param handler\n     * @param ex\n     * @throws Exception\n     */\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        log.info("afterCompletion执行异常{}",ex);\n    }\n}\n')])])]),r("h3",{attrs:{id:"_2、配置拦截器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、配置拦截器"}},[e._v("#")]),e._v(" 2、配置拦截器")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('/**\n * 1、编写一个拦截器实现HandlerInterceptor接口\n * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）\n * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】\n */\n@Configuration\npublic class AdminWebConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new LoginInterceptor())\n                .addPathPatterns("/**")  //所有请求都被拦截包括静态资源\n                .excludePathPatterns("/","/login","/css/**","/fonts/**","/images/**","/js/**"); //放行的请求\n    }\n}\n')])])]),r("h3",{attrs:{id:"_3、拦截器原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、拦截器原理"}},[e._v("#")]),e._v(" 3、拦截器原理")]),e._v(" "),r("p",[e._v("1、根据当前请求，找到**HandlerExecutionChain【**可以处理请求的handler以及handler的所有 拦截器】")]),e._v(" "),r("p",[e._v("2、先来"),r("strong",[e._v("顺序执行")]),e._v(" 所有拦截器的 preHandle方法")]),e._v(" "),r("ul",[r("li",[e._v("1、如果当前拦截器prehandler返回为true。则执行下一个拦截器的preHandle")]),e._v(" "),r("li",[e._v("2、如果当前拦截器返回为false。直接    倒序执行所有已经执行了的拦截器的  afterCompletion；")])]),e._v(" "),r("p",[r("strong",[e._v("3、如果任何一个拦截器返回false。直接跳出不执行目标方法")])]),e._v(" "),r("p",[r("strong",[e._v("4、所有拦截器都返回True。执行目标方法")])]),e._v(" "),r("p",[r("strong",[e._v("5、倒序执行所有拦截器的postHandle方法。")])]),e._v(" "),r("p",[r("strong",[e._v("6、前面的步骤有任何异常都会直接倒序触发")]),e._v(" afterCompletion")]),e._v(" "),r("p",[e._v("7、页面成功渲染完成以后，也会倒序触发 afterCompletion")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605764129365-5b31a748-1541-4bee-9692-1917b3364bc6.png?x-oss-process=image%2Fresize%2Cw_1500",alt:"image.png"}})]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605765121071-64cfc649-4892-49a3-ac08-88b52fb4286f.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("h2",{attrs:{id:"_7、文件上传"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、文件上传"}},[e._v("#")]),e._v(" 7、文件上传")]),e._v(" "),r("h3",{attrs:{id:"_1、页面表单"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、页面表单"}},[e._v("#")]),e._v(" 1、页面表单")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<form method="post" action="/upload" enctype="multipart/form-data">\n    <input type="file" name="file"><br>\n    <input type="submit" value="提交">\n</form>\n')])])]),r("h3",{attrs:{id:"_2、文件上传代码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、文件上传代码"}},[e._v("#")]),e._v(" 2、文件上传代码")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    /**\n     * MultipartFile 自动封装上传过来的文件\n     * @param email\n     * @param username\n     * @param headerImg\n     * @param photos\n     * @return\n     */\n    @PostMapping("/upload")\n    public String upload(@RequestParam("email") String email,\n                         @RequestParam("username") String username,\n                         @RequestPart("headerImg") MultipartFile headerImg,\n                         @RequestPart("photos") MultipartFile[] photos) throws IOException {\n\n        log.info("上传的信息：email={}，username={}，headerImg={}，photos={}",\n                email,username,headerImg.getSize(),photos.length);\n\n        if(!headerImg.isEmpty()){\n            //保存到文件服务器，OSS服务器\n            String originalFilename = headerImg.getOriginalFilename();\n            headerImg.transferTo(new File("H:\\\\cache\\\\"+originalFilename));\n        }\n\n        if(photos.length > 0){\n            for (MultipartFile photo : photos) {\n                if(!photo.isEmpty()){\n                    String originalFilename = photo.getOriginalFilename();\n                    photo.transferTo(new File("H:\\\\cache\\\\"+originalFilename));\n                }\n            }\n        }\n\n\n        return "main";\n    }\n')])])]),r("h3",{attrs:{id:"_3、自动配置原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、自动配置原理"}},[e._v("#")]),e._v(" 3、自动配置原理")]),e._v(" "),r("p",[e._v("**文件上传自动配置类-MultipartAutoConfiguration-**"),r("strong",[e._v("MultipartProperties")])]),e._v(" "),r("ul",[r("li",[r("p",[e._v("自动配置好了 "),r("strong",[e._v("StandardServletMultipartResolver   【文件上传解析器】")])])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("原理步骤")])])]),e._v(" "),r("li",[r("ul",[r("li",[r("strong",[e._v("1、请求进来使用文件上传解析器判断（"),r("strong",[e._v("isMultipart")]),e._v("）并封装（"),r("strong",[e._v("resolveMultipart，"),r("strong",[e._v("返回")]),e._v("MultipartHttpServletRequest")]),e._v("）文件上传请求")])]),e._v(" "),r("li",[r("strong",[e._v("2、参数解析器来解析请求中的文件内容封装成MultipartFile")])]),e._v(" "),r("li",[e._v("**3、将request中文件信息封装为一个Map；**MultiValueMap<String, MultipartFile>")])])])]),e._v(" "),r("p",[r("strong",[e._v("FileCopyUtils")]),e._v("。实现文件流的拷贝")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('    @PostMapping("/upload")\n    public String upload(@RequestParam("email") String email,\n                         @RequestParam("username") String username,\n                         @RequestPart("headerImg") MultipartFile headerImg,\n                         @RequestPart("photos") MultipartFile[] photos)\n')])])]),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1605847414866-32b6cc9c-5191-4052-92eb-069d652dfbf9.png",alt:"image.png"}})]),e._v(" "),r("h2",{attrs:{id:"_8、异常处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8、异常处理"}},[e._v("#")]),e._v(" 8、异常处理")]),e._v(" "),r("h3",{attrs:{id:"_1、错误处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、错误处理"}},[e._v("#")]),e._v(" 1、错误处理")]),e._v(" "),r("h4",{attrs:{id:"_1、默认规则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、默认规则"}},[e._v("#")]),e._v(" 1、默认规则")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("默认情况下，Spring Boot提供"),r("code",[e._v("/error")]),e._v("处理所有错误的映射")])]),e._v(" "),r("li",[r("p",[e._v("对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据")])]),e._v(" "),r("li",[r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024421363-77083c34-0b0e-4698-bb72-42da351d3944.png",alt:"image.png"}}),r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024616835-bc491bf0-c3b1-4ac3-b886-d4ff3c9874ce.png",alt:"image.png"}})])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("要对其进行自定义，添加"),r("strong",[r("strong",[e._v("View")])]),e._v("解析为error")])])]),e._v(" "),r("li",[r("p",[e._v("要完全替换默认行为，可以实现 "),r("code",[e._v("ErrorController")]),e._v("并注册该类型的Bean定义，或添加"),r("code",[e._v("ErrorAttributes类型的组件")]),e._v("以使用现有机制但替换其内容。")])]),e._v(" "),r("li",[r("p",[e._v("error/下的4xx，5xx页面会被自动解析；")])]),e._v(" "),r("li",[r("ul",[r("li",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024592756-d4ab8a6b-ec37-426b-8b39-010463603d57.png",alt:"image.png"}})])])])]),e._v(" "),r("h4",{attrs:{id:"_2、定制错误处理逻辑"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、定制错误处理逻辑"}},[e._v("#")]),e._v(" 2、定制错误处理逻辑")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("自定义错误页")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("error/404.html   error/5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页")])])]),e._v(" "),r("li",[r("p",[e._v("@ControllerAdvice+@ExceptionHandler处理全局异常；底层是 "),r("strong",[e._v("ExceptionHandlerExceptionResolver 支持的")])])]),e._v(" "),r("li",[r("p",[e._v("@ResponseStatus+自定义异常 ；底层是 "),r("strong",[e._v("ResponseStatusExceptionResolver ，把responsestatus注解的信息底层调用")]),e._v(" "),r("strong",[e._v("response.sendError(statusCode, resolvedReason)；tomcat发送的/error")])])]),e._v(" "),r("li",[r("p",[e._v("Spring底层的异常，如 参数类型转换异常；"),r("strong",[e._v("DefaultHandlerExceptionResolver 处理框架底层的异常。")])])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("response.sendError(HttpServletResponse."),r("strong",[e._v("SC_BAD_REQUEST")]),e._v(", ex.getMessage());")]),e._v(" "),r("li",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606114118010-f4aaf5ee-2747-4402-bc82-08321b2490ed.png",alt:"image.png"}})])])]),e._v(" "),r("li",[r("p",[e._v("自定义实现 HandlerExceptionResolver 处理异常；可以作为默认的全局异常处理规则")])]),e._v(" "),r("li",[r("ul",[r("li",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606114688649-e6502134-88b3-48db-a463-04c23eddedc7.png",alt:"image.png"}})])])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("ErrorViewResolver")]),e._v("  实现自定义处理异常；")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("response.sendError 。error请求就会转给controller")]),e._v(" "),r("li",[e._v("你的异常没有任何人能处理。tomcat底层 response.sendError。error请求就会转给controller")]),e._v(" "),r("li",[r("strong",[e._v("basicErrorController 要去的页面地址是")]),e._v(" "),r("strong",[e._v("ErrorViewResolver")]),e._v("  ；")])])])]),e._v(" "),r("h4",{attrs:{id:"_3、异常处理自动配置原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、异常处理自动配置原理"}},[e._v("#")]),e._v(" 3、异常处理自动配置原理")]),e._v(" "),r("ul",[r("li",[r("p",[r("strong",[e._v("ErrorMvcAutoConfiguration  自动配置异常处理规则")])])]),e._v(" "),r("li",[r("ul",[r("li",[r("strong",[e._v("容器中的组件：类型：DefaultErrorAttributes ->")]),e._v(" "),r("strong",[e._v("id：errorAttributes")])])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[r("strong",[e._v("public class")]),e._v(" "),r("strong",[e._v("DefaultErrorAttributes")]),e._v(" "),r("strong",[e._v("implements")]),e._v(" "),r("strong",[e._v("ErrorAttributes")]),e._v(", "),r("strong",[e._v("HandlerExceptionResolver")])]),e._v(" "),r("li",[r("strong",[e._v("DefaultErrorAttributes")]),e._v("：定义错误页面中可以包含哪些数据。")]),e._v(" "),r("li",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606044430037-8d599e30-1679-407c-96b7-4df345848fa4.png",alt:"image.png"}})]),e._v(" "),r("li",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606044487738-8cb1dcda-08c5-4104-a634-b2468512e60f.png",alt:"image.png"}})])])])])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("**容器中的组件：类型：**"),r("strong",[e._v("BasicErrorController --\x3e id：basicErrorController（json+白页 适配响应）")])])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[r("strong",[e._v("处理默认")]),e._v(" "),r("strong",[e._v("/error 路径的请求；页面响应")]),e._v(" "),r("strong",[e._v("new")]),e._v(" ModelAndView("),r("strong",[e._v('"error"')]),e._v(", model)；")]),e._v(" "),r("li",[r("strong",[e._v("容器中有组件 View")]),e._v("->"),r("strong",[e._v("id是error")]),e._v("；（响应默认错误页）")]),e._v(" "),r("li",[e._v("容器中放组件 "),r("strong",[e._v("BeanNameViewResolver（视图解析器）；按照返回的视图名作为组件的id去容器中找View对象。")])])])])])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("**容器中的组件：**类型：**DefaultErrorViewResolver -> id：**conventionErrorViewResolver")])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[e._v("如果发生错误，会以HTTP的状态码 作为视图页地址（viewName），找到真正的页面")]),e._v(" "),r("li",[e._v("error/404、5xx.html")])])])])])]),e._v(" "),r("p",[e._v("如果想要返回页面；就会找error视图【"),r("strong",[e._v("StaticView")]),e._v("】。(默认是一个白页)")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043870164-3770e116-344f-448e-8bff-8f32438edc9a.png",alt:"image.png"}}),e._v("写出去json")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043904074-50b7f088-2d2b-4da5-85e2-0a756da74dca.png",alt:"image.png"}}),e._v(" 错误页")]),e._v(" "),r("h4",{attrs:{id:"_4、异常处理步骤流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、异常处理步骤流程"}},[e._v("#")]),e._v(" 4、异常处理步骤流程")]),e._v(" "),r("p",[e._v("1、执行目标方法，目标方法运行期间有任何异常都会被catch、而且标志当前请求结束；并且用 "),r("strong",[e._v("dispatchException")])]),e._v(" "),r("p",[e._v("2、进入视图解析流程（页面渲染？）")]),e._v(" "),r("p",[e._v("processDispatchResult(processedRequest, response, mappedHandler, "),r("strong",[e._v("mv")]),e._v(", "),r("strong",[e._v("dispatchException")]),e._v(");")]),e._v(" "),r("p",[e._v("3、"),r("strong",[e._v("mv")]),e._v(" = "),r("strong",[e._v("processHandlerException")]),e._v("；处理handler发生的异常，处理完成返回ModelAndView；")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("1、遍历所有的 "),r("strong",[e._v("handlerExceptionResolvers，看谁能处理当前异常【"),r("strong",[r("strong",[e._v("HandlerExceptionResolver处理器异常解析器")])]),e._v("】")])])]),e._v(" "),r("li",[r("p",[r("strong",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606047252166-ce71c3a1-0e0e-4499-90f4-6d80014ca19f.png",alt:"image.png"}})])])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("2、系统默认的  异常解析器；")])])]),e._v(" "),r("li",[r("p",[r("strong",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606047109161-c68a46c1-202a-4db1-bbeb-23fcae49bbe9.png",alt:"image.png"}})])])]),e._v(" "),r("li",[r("ul",[r("li",[r("strong",[e._v("1、DefaultErrorAttributes先来处理异常。把异常信息保存到rrequest域，并且返回null；")])]),e._v(" "),r("li",[r("strong",[e._v("2、默认没有任何人能处理异常，所以异常会被抛出")])])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[r("strong",[e._v("1、如果没有任何人能处理最终底层就会发送 /error 请求。会被底层的BasicErrorController处理")])]),e._v(" "),r("li",[r("strong",[e._v("2、解析错误视图；遍历所有的")]),e._v(" "),r("strong",[e._v("ErrorViewResolver  看谁能解析。")])]),e._v(" "),r("li",[r("strong",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606047900473-e31c1dc3-7a5f-4f70-97de-5203429781fa.png",alt:"image.png"}})])]),e._v(" "),r("li",[r("strong",[e._v("3、默认的")]),e._v(" "),r("strong",[e._v("DefaultErrorViewResolver ,作用是把响应状态码作为错误页的地址，error/500.html")])]),e._v(" "),r("li",[r("strong",[e._v("4、模板引擎最终响应这个页面")]),e._v(" "),r("strong",[e._v("error/500.html")])])])])])])]),e._v(" "),r("h2",{attrs:{id:"_9、web原生组件注入-servlet、filter、listener"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9、web原生组件注入-servlet、filter、listener"}},[e._v("#")]),e._v(" 9、Web原生组件注入（Servlet、Filter、Listener）")]),e._v(" "),r("h3",{attrs:{id:"_1、使用servlet-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用servlet-api"}},[e._v("#")]),e._v(" 1、使用Servlet API")]),e._v(" "),r("p",[e._v("@ServletComponentScan(basePackages = "),r("strong",[e._v('"com.atguigu.admin"')]),e._v(") :指定原生Servlet组件都放在那里")]),e._v(" "),r("p",[e._v("@WebServlet(urlPatterns = "),r("strong",[e._v('"/my"')]),e._v(")：效果：直接响应，"),r("strong",[e._v("没有经过Spring的拦截器？")])]),e._v(" "),r("p",[e._v("@WebFilter(urlPatterns={"),r("strong",[e._v('"/css/*"')]),e._v(","),r("strong",[e._v('"/images/*"')]),e._v("})")]),e._v(" "),r("p",[e._v("@WebListener")]),e._v(" "),r("p",[e._v("推荐可以这种方式；")]),e._v(" "),r("p",[e._v("扩展：DispatchServlet 如何注册进来")]),e._v(" "),r("ul",[r("li",[e._v("容器中自动配置了  DispatcherServlet  属性绑定到 WebMvcProperties；对应的配置文件配置项是 "),r("strong",[e._v("spring.mvc。")])]),e._v(" "),r("li",[r("strong",[e._v("通过")]),e._v(" "),r("strong",[e._v("ServletRegistrationBean")]),r("DispatcherServlet",[e._v(" 把 DispatcherServlet  配置进来。")])],1),e._v(" "),r("li",[e._v("默认映射的是 / 路径。")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606284869220-8b63d54b-39c4-40f6-b226-f5f095ef9304.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),e._v(" "),r("p",[e._v("Tomcat-Servlet；")]),e._v(" "),r("p",[e._v("多个Servlet都能处理到同一层路径，精确优选原则")]),e._v(" "),r("p",[e._v("A： /my/")]),e._v(" "),r("p",[e._v("B： /my/1")]),e._v(" "),r("h3",{attrs:{id:"_2、使用registrationbean"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、使用registrationbean"}},[e._v("#")]),e._v(" 2、使用RegistrationBean")]),e._v(" "),r("p",[r("code",[e._v("ServletRegistrationBean")]),e._v(", "),r("code",[e._v("FilterRegistrationBean")]),e._v(", and "),r("code",[e._v("ServletListenerRegistrationBean")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('@Configuration\npublic class MyRegistConfig {\n\n    @Bean\n    public ServletRegistrationBean myServlet(){\n        MyServlet myServlet = new MyServlet();\n\n        return new ServletRegistrationBean(myServlet,"/my","/my02");\n    }\n\n\n    @Bean\n    public FilterRegistrationBean myFilter(){\n\n        MyFilter myFilter = new MyFilter();\n//        return new FilterRegistrationBean(myFilter,myServlet());\n        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(myFilter);\n        filterRegistrationBean.setUrlPatterns(Arrays.asList("/my","/css/*"));\n        return filterRegistrationBean;\n    }\n\n    @Bean\n    public ServletListenerRegistrationBean myListener(){\n        MySwervletContextListener mySwervletContextListener = new MySwervletContextListener();\n        return new ServletListenerRegistrationBean(mySwervletContextListener);\n    }\n}\n')])])]),r("h2",{attrs:{id:"_10、嵌入式servlet容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10、嵌入式servlet容器"}},[e._v("#")]),e._v(" 10、嵌入式Servlet容器")]),e._v(" "),r("h3",{attrs:{id:"_1、切换嵌入式servlet容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、切换嵌入式servlet容器"}},[e._v("#")]),e._v(" 1、切换嵌入式Servlet容器")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("默认支持的webServer")])]),e._v(" "),r("li",[r("ul",[r("li",[r("code",[e._v("Tomcat")]),e._v(", "),r("code",[e._v("Jetty")]),e._v(", or "),r("code",[e._v("Undertow")])]),e._v(" "),r("li",[r("code",[e._v("ServletWebServerApplicationContext 容器启动寻找ServletWebServerFactory 并引导创建服务器")])])])]),e._v(" "),r("li",[r("p",[e._v("切换服务器")])])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606280937533-504d0889-b893-4a01-af68-2fc31ffce9fc.png",alt:"image.png"}})]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n")])])]),r("ul",[r("li",[r("p",[e._v("原理")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("SpringBoot应用启动发现当前是Web应用。web场景包-导入tomcat")]),e._v(" "),r("li",[e._v("web应用会创建一个web版的ioc容器 "),r("code",[e._v("ServletWebServerApplicationContext")])]),e._v(" "),r("li",[r("code",[e._v("ServletWebServerApplicationContext")]),e._v("  启动的时候寻找 "),r("strong",[e._v("ServletWebServerFactory")]),r("code",[e._v("（Servlet 的web服务器工厂---\x3e Servlet 的web服务器）")])]),e._v(" "),r("li",[e._v("SpringBoot底层默认有很多的WebServer工厂；"),r("code",[e._v("TomcatServletWebServerFactory")]),e._v(", "),r("code",[e._v("JettyServletWebServerFactory")]),e._v(", or "),r("code",[e._v("UndertowServletWebServerFactory")])]),e._v(" "),r("li",[r("code",[e._v("底层直接会有一个自动配置类。ServletWebServerFactoryAutoConfiguration")])]),e._v(" "),r("li",[r("code",[e._v("ServletWebServerFactoryAutoConfiguration导入了ServletWebServerFactoryConfiguration（配置类）")])]),e._v(" "),r("li",[r("code",[e._v("ServletWebServerFactoryConfiguration 配置类 根据动态判断系统中到底导入了那个Web服务器的包。（默认是web-starter导入tomcat包），容器中就有 TomcatServletWebServerFactory")])]),e._v(" "),r("li",[r("code",[e._v("TomcatServletWebServerFactory 创建出Tomcat服务器并启动；TomcatWebServer 的构造器拥有初始化方法initialize---this.tomcat.start();")])]),e._v(" "),r("li",[r("code",[e._v("内嵌服务器，就是手动把启动服务器的代码调用（tomcat核心jar包存在）")])])])]),e._v(" "),r("li",[r("p",[e._v("``")])])]),e._v(" "),r("h3",{attrs:{id:"_2、定制servlet容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、定制servlet容器"}},[e._v("#")]),e._v(" 2、定制Servlet容器")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("实现  "),r("strong",[e._v("WebServerFactoryCu")]),e._v("stomizer"),r("ConfigurableServletWebServerFactory")],1)]),e._v(" "),r("li",[r("ul",[r("li",[e._v("把配置文件的值和"),r("strong",[e._v("ServletWebServerFactory 进行绑定")])])])]),e._v(" "),r("li",[r("p",[e._v("修改配置文件 "),r("strong",[e._v("server.xxx")])])]),e._v(" "),r("li",[r("p",[e._v("直接自定义 "),r("strong",[e._v("ConfigurableServletWebServerFactory")])])])]),e._v(" "),r("p",[r("strong",[e._v("xxxxx"),r("strong",[r("strong",[e._v("Customizer")])]),e._v("：定制化器，可以改变xxxx的默认规则")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CustomizationBean implements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\n\n    @Override\n    public void customize(ConfigurableServletWebServerFactory server) {\n        server.setPort(9000);\n    }\n\n}\n")])])]),r("h2",{attrs:{id:"_11、定制化原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11、定制化原理"}},[e._v("#")]),e._v(" 11、定制化原理")]),e._v(" "),r("h3",{attrs:{id:"_1、定制化的常见方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、定制化的常见方式"}},[e._v("#")]),e._v(" 1、定制化的常见方式")]),e._v(" "),r("ul",[r("li",[e._v("修改配置文件；")]),e._v(" "),r("li",[r("strong",[e._v("xxxxxCustomizer；")])]),e._v(" "),r("li",[r("strong",[e._v("编写自定义的配置类   xxxConfiguration；+")]),e._v(" "),r("strong",[e._v("@Bean替换、增加容器中默认组件；视图解析器")])]),e._v(" "),r("li",[r("strong",[e._v("Web应用 编写一个配置类实现 WebMvcConfigurer 即可定制化web功能；+ @Bean给容器中再扩展一些组件")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@Configuration\npublic class AdminWebConfig implements WebMvcConfigurer\n")])])]),r("ul",[r("li",[r("p",[e._v("@EnableWebMvc + WebMvcConfigurer —— @Bean  可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能")])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("原理")]),e._v(" "),r("li",[e._v("1、WebMvcAutoConfiguration  默认的SpringMVC的自动配置功能类。静态资源、欢迎页.....")]),e._v(" "),r("li",[e._v("2、一旦使用 @EnableWebMvc 、。会 @Import(DelegatingWebMvcConfiguration."),r("strong",[e._v("class")]),e._v(")")]),e._v(" "),r("li",[e._v("3、"),r("strong",[e._v("DelegatingWebMvcConfiguration")]),e._v(" 的 作用，只保证SpringMVC最基本的使用")])])]),e._v(" "),r("li",[r("ul",[r("li",[r("ul",[r("li",[e._v("把所有系统中的 WebMvcConfigurer 拿过来。所有功能的定制都是这些 WebMvcConfigurer  合起来一起生效")]),e._v(" "),r("li",[e._v("自动配置了一些非常底层的组件。"),r("strong",[e._v("RequestMappingHandlerMapping")]),e._v("、这些组件依赖的组件都是从容器中获取")]),e._v(" "),r("li",[r("strong",[e._v("public class")]),e._v(" DelegatingWebMvcConfiguration "),r("strong",[e._v("extends")]),e._v(" "),r("strong",[e._v("WebMvcConfigurationSupport")])])])])])]),e._v(" "),r("li",[r("ul",[r("li",[e._v("4、"),r("strong",[e._v("WebMvcAutoConfiguration")]),e._v(" 里面的配置要能生效 必须  @ConditionalOnMissingBean("),r("strong",[e._v("WebMvcConfigurationSupport")]),e._v("."),r("strong",[e._v("class")]),e._v(")")]),e._v(" "),r("li",[e._v("5、@EnableWebMvc  导致了 "),r("strong",[e._v("WebMvcAutoConfiguration  没有生效。")])])])]),e._v(" "),r("li",[r("p",[e._v("... ...")])])]),e._v(" "),r("h3",{attrs:{id:"_2、原理分析套路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、原理分析套路"}},[e._v("#")]),e._v(" 2、原理分析套路")]),e._v(" "),r("p",[r("strong",[e._v("场景starter")]),e._v(" "),r("strong",[e._v("- xxxxAutoConfiguration - 导入xxx组件 - 绑定xxxProperties --")]),e._v(" "),r("strong",[e._v("绑定配置文件项")])])])}),[],!1,null,null,null);t.default=n.exports}}]);