(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{544:function(t,a,e){"use strict";e.r(a);var r=e(5),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("数据访问")]),t._v(" "),e("h1",{attrs:{id:"springboot2核心技术-数据访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot2核心技术-数据访问"}},[t._v("#")]),t._v(" SpringBoot2核心技术-数据访问")]),t._v(" "),e("h1",{attrs:{id:"数据访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据访问"}},[t._v("#")]),t._v(" 数据访问")]),t._v(" "),e("h1",{attrs:{id:"_1、sql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、sql"}},[t._v("#")]),t._v(" 1、SQL")]),t._v(" "),e("h2",{attrs:{id:"_1、数据源的自动配置-hikaridatasource"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、数据源的自动配置-hikaridatasource"}},[t._v("#")]),t._v(" 1、数据源的自动配置-"),e("strong",[t._v("HikariDataSource")])]),t._v(" "),e("h3",{attrs:{id:"_1、导入jdbc场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、导入jdbc场景"}},[t._v("#")]),t._v(" 1、导入JDBC场景")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jdbc</artifactId>\n        </dependency>\n        \n")])])]),e("h3",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" "),e("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606366100317-5e0199fa-6709-4d32-bce3-bb262e2e5e6a.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),t._v(" "),e("p",[t._v("数据库驱动？")]),t._v(" "),e("p",[t._v("为什么导入JDBC场景，官方不导入驱动？官方不知道我们接下要操作什么数据库。")]),t._v(" "),e("p",[t._v("数据库版本和驱动版本对应")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("默认版本：<mysql.version>8.0.22</mysql.version>\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n\x3c!--            <version>5.1.49</version>--\x3e\n        </dependency>\n想要修改版本\n1、直接依赖引入具体版本（maven的就近依赖原则）\n2、重新声明版本（maven的属性的就近优先原则）\n    <properties>\n        <java.version>1.8</java.version>\n        <mysql.version>5.1.49</mysql.version>\n    </properties>\n")])])]),e("h3",{attrs:{id:"_2、分析自动配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、分析自动配置"}},[t._v("#")]),t._v(" 2、分析自动配置")]),t._v(" "),e("h4",{attrs:{id:"_1、自动配置的类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、自动配置的类"}},[t._v("#")]),t._v(" 1、自动配置的类")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("DataSourceAutoConfiguration ： 数据源的自动配置")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("修改数据源相关的配置："),e("strong",[t._v("spring.datasource")])]),t._v(" "),e("li",[e("strong",[t._v("数据库连接池的配置，是自己容器中没有DataSource才自动配置的")])]),t._v(" "),e("li",[t._v("底层配置好的连接池是："),e("strong",[t._v("HikariDataSource")])])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    @Configuration(proxyBeanMethods = false)\n    @Conditional(PooledDataSourceCondition.class)\n    @ConditionalOnMissingBean({ DataSource.class, XADataSource.class })\n    @Import({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,\n            DataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.OracleUcp.class,\n            DataSourceConfiguration.Generic.class, DataSourceJmxConfiguration.class })\n    protected static class PooledDataSourceConfiguration\n")])])]),e("ul",[e("li",[e("p",[t._v("DataSourceTransactionManagerAutoConfiguration： 事务管理器的自动配置")])]),t._v(" "),e("li",[e("p",[t._v("JdbcTemplateAutoConfiguration： "),e("strong",[t._v("JdbcTemplate的自动配置，可以来对数据库进行crud")])])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("可以修改这个配置项@ConfigurationProperties(prefix = "),e("strong",[t._v('"spring.jdbc"')]),t._v(") 来修改JdbcTemplate")]),t._v(" "),e("li",[t._v("@Bean@Primary    JdbcTemplate；容器中有这个组件")])])]),t._v(" "),e("li",[e("p",[t._v("JndiDataSourceAutoConfiguration： jndi的自动配置")])]),t._v(" "),e("li",[e("p",[t._v("XADataSourceAutoConfiguration： 分布式事务相关的")])])]),t._v(" "),e("h3",{attrs:{id:"_3、修改配置项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、修改配置项"}},[t._v("#")]),t._v(" 3、修改配置项")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/db_account\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.jdbc.Driver\n")])])]),e("h3",{attrs:{id:"_4、测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、测试"}},[t._v("#")]),t._v(" 4、测试")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Slf4j\n@SpringBootTest\nclass Boot05WebAdminApplicationTests {\n\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n\n    @Test\n    void contextLoads() {\n\n//        jdbcTemplate.queryForObject("select * from account_tbl")\n//        jdbcTemplate.queryForList("select * from account_tbl",)\n        Long aLong = jdbcTemplate.queryForObject("select count(*) from account_tbl", Long.class);\n        log.info("记录总数：{}",aLong);\n    }\n\n}\n')])])]),e("h2",{attrs:{id:"_2、使用druid数据源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、使用druid数据源"}},[t._v("#")]),t._v(" 2、使用Druid数据源")]),t._v(" "),e("h3",{attrs:{id:"_1、druid官方github地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、druid官方github地址"}},[t._v("#")]),t._v(" 1、druid官方github地址")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/alibaba/druid",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/alibaba/druid"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("整合第三方技术的两种方式")]),t._v(" "),e("ul",[e("li",[t._v("自定义")]),t._v(" "),e("li",[t._v("找starter")])]),t._v(" "),e("h3",{attrs:{id:"_2、自定义方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、自定义方式"}},[t._v("#")]),t._v(" 2、自定义方式")]),t._v(" "),e("h4",{attrs:{id:"_1、创建数据源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、创建数据源"}},[t._v("#")]),t._v(" 1、创建数据源")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.17</version>\n        </dependency>\n\n<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"\n        destroy-method="close">\n        <property name="url" value="${jdbc.url}" />\n        <property name="username" value="${jdbc.username}" />\n        <property name="password" value="${jdbc.password}" />\n        <property name="maxActive" value="20" />\n        <property name="initialSize" value="1" />\n        <property name="maxWait" value="60000" />\n        <property name="minIdle" value="1" />\n        <property name="timeBetweenEvictionRunsMillis" value="60000" />\n        <property name="minEvictableIdleTimeMillis" value="300000" />\n        <property name="testWhileIdle" value="true" />\n        <property name="testOnBorrow" value="false" />\n        <property name="testOnReturn" value="false" />\n        <property name="poolPreparedStatements" value="true" />\n        <property name="maxOpenPreparedStatements" value="20" />\n')])])]),e("h4",{attrs:{id:"_2、statviewservlet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、statviewservlet"}},[t._v("#")]),t._v(" 2、StatViewServlet")]),t._v(" "),e("blockquote",[e("p",[t._v("StatViewServlet的用途包括：")]),t._v(" "),e("ul",[e("li",[t._v("提供监控信息展示的html页面")]),t._v(" "),e("li",[t._v("提供监控信息的JSON API")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    <servlet>\n        <servlet-name>DruidStatView</servlet-name>\n        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>DruidStatView</servlet-name>\n        <url-pattern>/druid/*</url-pattern>\n    </servlet-mapping>\n")])])]),e("h4",{attrs:{id:"_3、statfilter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、statfilter"}},[t._v("#")]),t._v(" 3、StatFilter")]),t._v(" "),e("blockquote",[e("p",[t._v("用于统计监控信息；如SQL监控、URI监控")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('需要给数据源中配置如下属性；可以允许多个filter，多个用，分割；如：\n\n<property name="filters" value="stat,slf4j" />\n')])])]),e("p",[t._v("系统中所有filter：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("别名")]),t._v(" "),e("th",[t._v("Filter类名")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("default")]),t._v(" "),e("td",[t._v("com.alibaba.druid.filter.stat.StatFilter")])]),t._v(" "),e("tr",[e("td",[t._v("stat")]),t._v(" "),e("td",[t._v("com.alibaba.druid.filter.stat.StatFilter")])]),t._v(" "),e("tr",[e("td",[t._v("mergeStat")]),t._v(" "),e("td",[t._v("com.alibaba.druid.filter.stat.MergeStatFilter")])]),t._v(" "),e("tr",[e("td",[t._v("encoding")]),t._v(" "),e("td",[t._v("com.alibaba.druid.filter.encoding.EncodingConvertFilter")])]),t._v(" "),e("tr",[e("td",[t._v("log4j")]),t._v(" "),e("td",[t._v("com.alibaba.druid.filter.logging.Log4jFilter")])]),t._v(" "),e("tr",[e("td",[t._v("log4j2")]),t._v(" "),e("td",[t._v("com.alibaba.druid.filter.logging.Log4j2Filter")])]),t._v(" "),e("tr",[e("td",[t._v("slf4j")]),t._v(" "),e("td",[t._v("com.alibaba.druid.filter.logging.Slf4jLogFilter")])]),t._v(" "),e("tr",[e("td",[t._v("commonlogging")]),t._v(" "),e("td",[t._v("com.alibaba.druid.filter.logging.CommonsLogFilter")])])])]),t._v(" "),e("p",[e("strong",[t._v("慢SQL记录配置")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">\n    <property name="slowSqlMillis" value="10000" />\n    <property name="logSlowSql" value="true" />\n</bean>\n\n使用 slowSqlMillis 定义慢SQL的时长\n')])])]),e("h3",{attrs:{id:"_3、使用官方starter方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、使用官方starter方式"}},[t._v("#")]),t._v(" 3、使用官方starter方式")]),t._v(" "),e("h4",{attrs:{id:"_1、引入druid-starter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、引入druid-starter"}},[t._v("#")]),t._v(" 1、引入druid-starter")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n            <version>1.1.17</version>\n        </dependency>\n")])])]),e("h4",{attrs:{id:"_2、分析自动配置-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、分析自动配置-2"}},[t._v("#")]),t._v(" 2、分析自动配置")]),t._v(" "),e("ul",[e("li",[t._v("扩展配置项 "),e("strong",[t._v("spring.datasource.druid")])]),t._v(" "),e("li",[t._v("DruidSpringAopConfiguration."),e("strong",[t._v("class")]),t._v(",   监控SpringBean的；配置项："),e("strong",[t._v("spring.datasource.druid.aop-patterns")])]),t._v(" "),e("li",[t._v("DruidStatViewServletConfiguration."),e("strong",[t._v("class")]),t._v(", 监控页的配置："),e("strong",[t._v("spring.datasource.druid.stat-view-servlet；默认开启")])]),t._v(" "),e("li",[t._v("DruidWebStatFilterConfiguration."),e("strong",[t._v("class")]),t._v(", web监控配置；"),e("strong",[t._v("spring.datasource.druid.web-stat-filter；默认开启")])]),t._v(" "),e("li",[t._v("DruidFilterConfiguration."),e("strong",[t._v("class")]),t._v("}) 所有Druid自己filter的配置")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    private static final String FILTER_STAT_PREFIX = "spring.datasource.druid.filter.stat";\n    private static final String FILTER_CONFIG_PREFIX = "spring.datasource.druid.filter.config";\n    private static final String FILTER_ENCODING_PREFIX = "spring.datasource.druid.filter.encoding";\n    private static final String FILTER_SLF4J_PREFIX = "spring.datasource.druid.filter.slf4j";\n    private static final String FILTER_LOG4J_PREFIX = "spring.datasource.druid.filter.log4j";\n    private static final String FILTER_LOG4J2_PREFIX = "spring.datasource.druid.filter.log4j2";\n    private static final String FILTER_COMMONS_LOG_PREFIX = "spring.datasource.druid.filter.commons-log";\n    private static final String FILTER_WALL_PREFIX = "spring.datasource.druid.filter.wall";\n')])])]),e("h4",{attrs:{id:"_3、配置示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、配置示例"}},[t._v("#")]),t._v(" 3、配置示例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("spring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/db_account\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.jdbc.Driver\n\n    druid:\n      aop-patterns: com.atguigu.admin.*  #监控SpringBean\n      filters: stat,wall     # 底层开启功能，stat（sql监控），wall（防火墙）\n\n      stat-view-servlet:   # 配置监控页功能\n        enabled: true\n        login-username: admin\n        login-password: admin\n        resetEnable: false\n\n      web-stat-filter:  # 监控web\n        enabled: true\n        urlPattern: /*\n        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'\n\n\n      filter:\n        stat:    # 对上面filters里面的stat的详细配置\n          slow-sql-millis: 1000\n          logSlowSql: true\n          enabled: true\n        wall:\n          enabled: true\n          config:\n            drop-table-allow: false\n")])])]),e("p",[t._v("SpringBoot配置示例")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("配置项列表"),e("a",{attrs:{href:"https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/alibaba/druid/wiki/DruidDataSource配置属性列表"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"_3、整合mybatis操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、整合mybatis操作"}},[t._v("#")]),t._v(" 3、整合MyBatis操作")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/mybatis",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/mybatis"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("starter")]),t._v(" "),e("p",[t._v("SpringBoot官方的Starter：spring-boot-starter-*")]),t._v(" "),e("p",[t._v("第三方的： *-spring-boot-starter")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>2.1.4</version>\n        </dependency>\n")])])]),e("p",[e("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606704096118-53001250-a04a-4210-80ee-6de6a370be2e.png",alt:"image.png"}})]),t._v(" "),e("h3",{attrs:{id:"_1、配置模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、配置模式"}},[t._v("#")]),t._v(" 1、配置模式")]),t._v(" "),e("ul",[e("li",[t._v("全局配置文件")]),t._v(" "),e("li",[t._v("SqlSessionFactory: 自动配置好了")]),t._v(" "),e("li",[t._v("SqlSession：自动配置了 "),e("strong",[t._v("SqlSessionTemplate 组合了SqlSession")])]),t._v(" "),e("li",[t._v("@Import("),e("strong",[t._v("AutoConfiguredMapperScannerRegistrar")]),t._v("."),e("strong",[t._v("class")]),t._v("）；")]),t._v(" "),e("li",[t._v("Mapper： 只要我们写的操作MyBatis的接口标准了 "),e("strong",[t._v("@Mapper 就会被自动扫描进来")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@EnableConfigurationProperties(MybatisProperties.class) ： MyBatis配置项绑定类。\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class })\npublic class MybatisAutoConfiguration{}\n\n@ConfigurationProperties(prefix = "mybatis")\npublic class MybatisProperties\n')])])]),e("p",[t._v("可以修改配置文件中 mybatis 开始的所有；")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('# 配置mybatis规则\nmybatis:\n  config-location: classpath:mybatis/mybatis-config.xml  #全局配置文件位置\n  mapper-locations: classpath:mybatis/mapper/*.xml  #sql映射文件位置\n  \nMapper接口---\x3e绑定Xml\n<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper\n        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="com.atguigu.admin.mapper.AccountMapper">\n\x3c!--    public Account getAcct(Long id); --\x3e\n    <select id="getAcct" resultType="com.atguigu.admin.bean.Account">\n        select * from  account_tbl where  id=#{id}\n    </select>\n</mapper>\n')])])]),e("p",[t._v("配置 "),e("strong",[t._v("private")]),t._v(" Configuration "),e("strong",[t._v("configuration")]),t._v("; mybatis."),e("strong",[t._v("configuration下面的所有，就是相当于改mybatis全局配置文件中的值")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 配置mybatis规则\nmybatis:\n#  config-location: classpath:mybatis/mybatis-config.xml\n  mapper-locations: classpath:mybatis/mapper/*.xml\n  configuration:\n    map-underscore-to-camel-case: true\n    \n 可以不写全局；配置文件，所有全局配置文件的配置都放在configuration配置项中即可\n")])])]),e("ul",[e("li",[t._v("导入mybatis官方starter")]),t._v(" "),e("li",[t._v("编写mapper接口。标准@Mapper注解")]),t._v(" "),e("li",[t._v("编写sql映射文件并绑定mapper接口")]),t._v(" "),e("li",[t._v("在application.yaml中指定Mapper配置文件的位置，以及指定全局配置文件的信息 （建议；"),e("strong",[t._v("配置在mybatis.configuration")]),t._v("）")])]),t._v(" "),e("h3",{attrs:{id:"_2、注解模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、注解模式"}},[t._v("#")]),t._v(" 2、注解模式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Mapper\npublic interface CityMapper {\n\n    @Select("select * from city where id=#{id}")\n    public City getById(Long id);\n\n    public void insert(City city);\n\n}\n')])])]),e("h3",{attrs:{id:"_3、混合模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、混合模式"}},[t._v("#")]),t._v(" 3、混合模式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Mapper\npublic interface CityMapper {\n\n    @Select("select * from city where id=#{id}")\n    public City getById(Long id);\n\n    public void insert(City city);\n\n}\n')])])]),e("p",[e("strong",[t._v("最佳实战：")])]),t._v(" "),e("ul",[e("li",[t._v("引入mybatis-starter")]),t._v(" "),e("li",[e("strong",[t._v("配置application.yaml中，指定mapper-location位置即可")])]),t._v(" "),e("li",[t._v("编写Mapper接口并标注@Mapper注解")]),t._v(" "),e("li",[t._v("简单方法直接注解方式")]),t._v(" "),e("li",[t._v("复杂方法编写mapper.xml进行绑定映射")]),t._v(" "),e("li",[e("em",[t._v('@MapperScan("com.atguigu.admin.mapper") 简化，其他的接口就可以不用标注@Mapper注解')])])]),t._v(" "),e("h2",{attrs:{id:"_4、整合-mybatis-plus-完成crud"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、整合-mybatis-plus-完成crud"}},[t._v("#")]),t._v(" 4、整合 MyBatis-Plus 完成CRUD")]),t._v(" "),e("h3",{attrs:{id:"_1、什么是mybatis-plus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是mybatis-plus"}},[t._v("#")]),t._v(" 1、什么是MyBatis-Plus")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/baomidou/mybatis-plus",target:"_blank",rel:"noopener noreferrer"}},[t._v("MyBatis-Plus"),e("OutboundLink")],1),t._v("（简称 MP）是一个 "),e("a",{attrs:{href:"http://www.mybatis.org/mybatis-3/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MyBatis"),e("OutboundLink")],1),t._v(" 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://baomidou.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("mybatis plus 官网"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("建议安装 "),e("strong",[t._v("MybatisX")]),t._v(" 插件")]),t._v(" "),e("h3",{attrs:{id:"_2、整合mybatis-plus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、整合mybatis-plus"}},[t._v("#")]),t._v(" 2、整合MyBatis-Plus")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.4.1</version>\n        </dependency>\n")])])]),e("p",[t._v("自动配置")]),t._v(" "),e("ul",[e("li",[t._v("MybatisPlusAutoConfiguration 配置类，MybatisPlusProperties 配置项绑定。"),e("strong",[t._v("mybatis-plus：xxx 就是对****mybatis-plus的定制")])]),t._v(" "),e("li",[e("strong",[t._v("SqlSessionFactory 自动配置好。底层是容器中默认的数据源")])]),t._v(" "),e("li",[e("strong",[t._v("mapperLocations 自动配置好的。有默认值。****classpath*:/mapper/")]),t._v("/*.xml；任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。  建议以后sql映射文件，放在 mapper下**")]),t._v(" "),e("li",[e("strong",[t._v("容器中也自动配置好了")]),t._v(" "),e("strong",[t._v("SqlSessionTemplate")])]),t._v(" "),e("li",[e("strong",[t._v("@Mapper 标注的接口也会被自动扫描；建议直接")]),t._v(" @MapperScan("),e("strong",[t._v('"com.atguigu.admin.mapper"')]),t._v(") 批量扫描就行")])]),t._v(" "),e("p",[e("strong",[t._v("优点：")])]),t._v(" "),e("ul",[e("li",[t._v("只需要我们的Mapper继承 "),e("strong",[t._v("BaseMapper")]),t._v(" 就可以拥有crud能力")])]),t._v(" "),e("h3",{attrs:{id:"_3、crud功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、crud功能"}},[t._v("#")]),t._v(" 3、CRUD功能")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    @GetMapping("/user/delete/{id}")\n    public String deleteUser(@PathVariable("id") Long id,\n                             @RequestParam(value = "pn",defaultValue = "1")Integer pn,\n                             RedirectAttributes ra){\n\n        userService.removeById(id);\n\n        ra.addAttribute("pn",pn);\n        return "redirect:/dynamic_table";\n    }\n\n\n    @GetMapping("/dynamic_table")\n    public String dynamic_table(@RequestParam(value="pn",defaultValue = "1") Integer pn,Model model){\n        //表格内容的遍历\n//        response.sendError\n//     List<User> users = Arrays.asList(new User("zhangsan", "123456"),\n//                new User("lisi", "123444"),\n//                new User("haha", "aaaaa"),\n//                new User("hehe ", "aaddd"));\n//        model.addAttribute("users",users);\n//\n//        if(users.size()>3){\n//            throw new UserTooManyException();\n//        }\n        //从数据库中查出user表中的用户进行展示\n\n        //构造分页参数\n        Page<User> page = new Page<>(pn, 2);\n        //调用page进行分页\n        Page<User> userPage = userService.page(page, null);\n\n\n//        userPage.getRecords()\n//        userPage.getCurrent()\n//        userPage.getPages()\n\n\n        model.addAttribute("users",userPage);\n\n        return "table/dynamic_table";\n    }\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@Service\npublic class UserServiceImpl extends ServiceImpl<UserMapper,User> implements UserService {\n\n\n}\n\npublic interface UserService extends IService<User> {\n\n}\n")])])]),e("h1",{attrs:{id:"_2、nosql"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、nosql"}},[t._v("#")]),t._v(" 2、NoSQL")]),t._v(" "),e("p",[t._v("Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、"),e("strong",[t._v("缓存")]),t._v("和消息中间件。 它支持多种类型的数据结构，如 "),e("a",{attrs:{href:"http://www.redis.cn/topics/data-types-intro.html#strings",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符串（strings）"),e("OutboundLink")],1),t._v("， "),e("a",{attrs:{href:"http://www.redis.cn/topics/data-types-intro.html#hashes",target:"_blank",rel:"noopener noreferrer"}},[t._v("散列（hashes）"),e("OutboundLink")],1),t._v("， "),e("a",{attrs:{href:"http://www.redis.cn/topics/data-types-intro.html#lists",target:"_blank",rel:"noopener noreferrer"}},[t._v("列表（lists）"),e("OutboundLink")],1),t._v("， "),e("a",{attrs:{href:"http://www.redis.cn/topics/data-types-intro.html#sets",target:"_blank",rel:"noopener noreferrer"}},[t._v("集合（sets）"),e("OutboundLink")],1),t._v("， "),e("a",{attrs:{href:"http://www.redis.cn/topics/data-types-intro.html#sorted-sets",target:"_blank",rel:"noopener noreferrer"}},[t._v("有序集合（sorted sets）"),e("OutboundLink")],1),t._v(" 与范围查询， "),e("a",{attrs:{href:"http://www.redis.cn/topics/data-types-intro.html#bitmaps",target:"_blank",rel:"noopener noreferrer"}},[t._v("bitmaps"),e("OutboundLink")],1),t._v("， "),e("a",{attrs:{href:"http://www.redis.cn/topics/data-types-intro.html#hyperloglogs",target:"_blank",rel:"noopener noreferrer"}},[t._v("hyperloglogs"),e("OutboundLink")],1),t._v(" 和 "),e("a",{attrs:{href:"http://www.redis.cn/commands/geoadd.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("地理空间（geospatial）"),e("OutboundLink")],1),t._v(" 索引半径查询。 Redis 内置了 "),e("a",{attrs:{href:"http://www.redis.cn/topics/replication.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("复制（replication）"),e("OutboundLink")],1),t._v("，"),e("a",{attrs:{href:"http://www.redis.cn/commands/eval.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("LUA脚本（Lua scripting）"),e("OutboundLink")],1),t._v("， "),e("a",{attrs:{href:"http://www.redis.cn/topics/lru-cache.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("LRU驱动事件（LRU eviction）"),e("OutboundLink")],1),t._v("，"),e("a",{attrs:{href:"http://www.redis.cn/topics/transactions.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("事务（transactions）"),e("OutboundLink")],1),t._v(" 和不同级别的 "),e("a",{attrs:{href:"http://www.redis.cn/topics/persistence.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("磁盘持久化（persistence）"),e("OutboundLink")],1),t._v("， 并通过 "),e("a",{attrs:{href:"http://www.redis.cn/topics/sentinel.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis哨兵（Sentinel）"),e("OutboundLink")],1),t._v("和自动 "),e("a",{attrs:{href:"http://www.redis.cn/topics/cluster-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("分区（Cluster）"),e("OutboundLink")],1),t._v("提供高可用性（high availability）。")]),t._v(" "),e("h2",{attrs:{id:"_1、redis自动配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、redis自动配置"}},[t._v("#")]),t._v(" 1、Redis自动配置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n")])])]),e("p",[e("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606745732785-17d1227a-75b9-4f00-a3f1-7fc4137b5113.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),t._v(" "),e("p",[t._v("自动配置：")]),t._v(" "),e("ul",[e("li",[t._v("RedisAutoConfiguration 自动配置类。RedisProperties 属性类 --\x3e "),e("strong",[t._v("spring.redis.xxx是对redis的配置")])]),t._v(" "),e("li",[t._v("连接工厂是准备好的。"),e("strong",[t._v("Lettuce")]),t._v("ConnectionConfiguration、"),e("strong",[t._v("Jedis")]),t._v("ConnectionConfiguration")]),t._v(" "),e("li",[e("strong",[t._v("自动注入了RedisTemplate")]),t._v("<"),e("strong",[t._v("Object")]),t._v(", "),e("strong",[t._v("Object")]),t._v("> ： xxxTemplate；")]),t._v(" "),e("li",[e("strong",[t._v("自动注入了StringRedisTemplate；k：v都是String")])]),t._v(" "),e("li",[e("strong",[t._v("key：value")])]),t._v(" "),e("li",[e("strong",[t._v("底层只要我们使用")]),t._v(" **StringRedisTemplate、**"),e("strong",[t._v("RedisTemplate就可以操作redis")])])]),t._v(" "),e("p",[e("strong",[t._v("redis环境搭建")])]),t._v(" "),e("p",[e("strong",[t._v("1、阿里云按量付费redis。经典网络")])]),t._v(" "),e("p",[e("strong",[t._v("2、申请redis的公网连接地址")])]),t._v(" "),e("p",[e("strong",[t._v("3、修改白名单  允许0.0.0.0/0 访问")])]),t._v(" "),e("h2",{attrs:{id:"_2、redistemplate与lettuce"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、redistemplate与lettuce"}},[t._v("#")]),t._v(" 2、RedisTemplate与Lettuce")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('    @Test\n    void testRedis(){\n        ValueOperations<String, String> operations = redisTemplate.opsForValue();\n\n        operations.set("hello","world");\n\n        String hello = operations.get("hello");\n        System.out.println(hello);\n    }\n')])])]),e("h2",{attrs:{id:"_3、切换至jedis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、切换至jedis"}},[t._v("#")]),t._v(" 3、切换至jedis")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n\n\x3c!--        导入jedis--\x3e\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n        </dependency>\nspring:\n  redis:\n      host: r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com\n      port: 6379\n      password: lfy:Lfy123456\n      client-type: jedis\n      jedis:\n        pool:\n          max-active: 10\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);