(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{545:function(a,t,e){"use strict";e.r(t);var r=e(5),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"spring-ioc和di区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc和di区别"}},[a._v("#")]),a._v(" spring IOC和DI区别")]),a._v(" "),e("p",[a._v("IOC：控制反转，是面向对象编程中的一种设计原则可以用来减低计算机代码之间的耦合度，其中最常见的方式叫做依赖注入（DI）。")]),a._v(" "),e("p",[a._v("DI：依赖注入，实现IOC的一种技术手段。")]),a._v(" "),e("p",[a._v("还有另外两种方式：依赖查找、依赖拖拽。")]),a._v(" "),e("h2",{attrs:{id:"spring实现ioc的思路和方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring实现ioc的思路和方法"}},[a._v("#")]),a._v(" spring实现IOC的思路和方法")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("spring实现IOC的思路是提供一些配置信息来描述类之间的关系，然后由容器去解析这些配置信息，进而维护好对象之间的依赖关系，前提是对象之间的依赖关系必须在类中定义好。\n")])])]),e("ol",[e("li",[a._v("应用程序中提供类，提供依赖关系（属性或构造方法）")]),a._v(" "),e("li",[a._v("把需要交给容器管理的对象通过配置告诉容器（xml、annotation、javaconfig）")]),a._v(" "),e("li",[a._v("把各个类之间的依赖关系通过配置信息告诉容器。")])]),a._v(" "),e("h2",{attrs:{id:"spring编程的风格-三者可以混合使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring编程的风格-三者可以混合使用"}},[a._v("#")]),a._v(" spring编程的风格(三者可以混合使用)")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("Schema-based   --xml")]),a._v(" "),e("p",[a._v("ClassPathXmlApplicationContext Bean工厂，不具备解析注解开启的功能，需要在xml中配置")])]),a._v(" "),e("li",[e("p",[a._v("Annotation-based    --annotation")]),a._v(" "),e("p",[a._v("需要在xml配置文件中开启注解以及扫描路径，或者在java configuration中开启扫描，当扫描路径下不需要扫描某些类时，可以在**@ComponentScan**中对其进行配置，")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('@ComponentScan(value = "com.cm", includeFilters = {@ComponentScan.Filter(type = FilterType.REGEX, pattern = "com.cm.service.*")},excludeFilters = {@ComponentScan.Filter(type = FilterType.REGEX, pattern = "com.cm.service.*")})\n')])])]),e("p",[a._v("当工程中类过多时，可以在maven中加入依赖，来加速对类扫描。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v(" <dependency>\n   <groupId>org.springframework</groupId>\n   <artifactId>spring-context-indexer</artifactId>\n   <version>5.2.7.RELEASE</version>\n   <optional>true</optional>\n </dependency>\n")])])])]),a._v(" "),e("li",[e("p",[a._v("Java-based    --java configuration")]),a._v(" "),e("p",[a._v("AnnotationConfigApplicationContext Bean工厂")])])]),a._v(" "),e("h2",{attrs:{id:"ioc的两种方法-xml风格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ioc的两种方法-xml风格"}},[a._v("#")]),a._v(" IOC的两种方法（xml风格）")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("构造方法，在xml配置文件中加入")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<constructor-arg ref="dao"></constructor-arg>\n')])])])]),a._v(" "),e("li",[e("p",[a._v("set方法，在xml配置文件中加入")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<property name="dao" ref="dao"></property>\n')])])])])]),a._v(" "),e("h2",{attrs:{id:"自动装配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动装配"}},[a._v("#")]),a._v(" 自动装配")]),a._v(" "),e("p",[a._v("优点：减少xml中的配置，当对象发生改变时，自动更新。")]),a._v(" "),e("ol",[e("li",[e("h3",{attrs:{id:"xml编程方式-全局配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xml编程方式-全局配置"}},[a._v("#")]),a._v(" xml编程方式：全局配置")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('在beans中配置default-autowire="byType"\n')])])]),e("p",[a._v("四种配置方式：")]),a._v(" "),e("ul",[e("li",[a._v("byName：通过依赖注入时，定义的set方法来进行匹配，bean中配置name属性，不配置时默认与id相同。")]),a._v(" "),e("li",[a._v("byType：通过依赖注入时，依赖的类进行匹配，当匹配的接口有两个实现类时，启动报错，此时可以通过配置指定bean的autowire属性来定义。")]),a._v(" "),e("li",[a._v("constructor：通过构造器来匹配。")]),a._v(" "),e("li",[a._v("no：不开启自动装配，同default。")])])]),a._v(" "),e("li",[e("h3",{attrs:{id:"注解方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注解方式"}},[a._v("#")]),a._v(" 注解方式")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("@Component是@Service、@Controller、@Repository等注解的父类。\n@Service、@Controller、@Repository未来可能会拥有额外的功能（官网解释）。\n")])])]),e("p",[a._v("@Autowired 与 @Resource区别：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("@Autowired默认优先使用byType进行自动注入，当byType匹配不到时，则会根据byName通过定义的属性名来进行匹配。属性名：private IndexDao indexDaoImpl;\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('@Resource默认使用byName进行自动注入，通过定义的属性名来进行匹配，与set方法名无关。可以在注解上面指定装配类型: @Resource(type = IndexDao.class)。当指定name时，默认为需要注入的类首字母小写：@Resource(name = indexDaoImpl)，可以通过相应的注解设置bean name：@Repository("myIndexDao")，\n或者通过继承AnnotationBeanNameGenerator，重写generateBeanName生成器来定制bean name的生成规则，此方式需要在配置中指定命名规则生成类。\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('当一个接口被多个类实现时，注入时除上述方法外还可以通过以下方式：\n1.在想要注入的实现类上，加入@Primary注解。\n2.在注入时，加入@Qualifier(name="")指定具体要注入的类。\n')])])]),e("h3",{attrs:{id:"springbean作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springbean作用域"}},[a._v("#")]),a._v(" springbean作用域")]),a._v(" "),e("p",[a._v("singleton：单例，默认。")]),a._v(" "),e("p",[a._v('prototype：每次调用时，创建新的实例，@Scope("prototype")。')]),a._v(" "),e("p",[a._v("当在singleton作用域中，使用prototype-bean时，会失效，因为单例作用域中只会执行一次初始化的方法，所以只会实例化一次prototype-bean。")]),a._v(" "),e("p",[e("strong",[a._v("想要解决这个问题，有两种方式：")])]),a._v(" "),e("p",[a._v("1.需要在singleton类中继承ApplicationContextAware，重写setApplicationContext方法，调用时使用ApplicationContextAware.getBean()，此时不需要@Autowired注入。")]),a._v(" "),e("p",[a._v("2.使用@Lookup注解，@Lookup需要定义到抽象方法上或get方法上，此时不需要@Autowired注入，@Lookup可以指定类的name。")])])]),a._v(" "),e("h2",{attrs:{id:"spring生命周期的回调"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring生命周期的回调"}},[a._v("#")]),a._v(" Spring生命周期的回调：")]),a._v(" "),e("h4",{attrs:{id:"初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[a._v("#")]),a._v(" 初始化：")]),a._v(" "),e("ol",[e("li",[a._v("在方法上面使用 "),e("strong",[a._v("@PostConstruct")]),a._v(" 注解")]),a._v(" "),e("li",[a._v("在类中实现InitializingBean接口，重写afterPropertiesSet方法。")]),a._v(" "),e("li",[a._v("自定义方法，在配置文件bean标签中指定init方法")])]),a._v(" "),e("h4",{attrs:{id:"销毁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#销毁"}},[a._v("#")]),a._v(" 销毁：")]),a._v(" "),e("ol",[e("li",[a._v("在方法上面使用 "),e("strong",[a._v("@PreDestroy")]),a._v(" 注解")]),a._v(" "),e("li",[a._v("在类中实现DisposableBean接口，重写destroy方法。")]),a._v(" "),e("li",[a._v("自定义方法，在配置文件bean标签中指定destroy方法")])]),a._v(" "),e("h2",{attrs:{id:"spring-bean相互引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean相互引用"}},[a._v("#")]),a._v(" Spring bean相互引用：")]),a._v(" "),e("p",[a._v("可以相互引用，但是当bean作用域为prototype时，不可以相互引用。")]),a._v(" "),e("h2",{attrs:{id:"切换不同环境的类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#切换不同环境的类"}},[a._v("#")]),a._v(" 切换不同环境的类：")]),a._v(" "),e("p",[e("strong",[a._v("@Profile")]),a._v("注解，通过AnnotationConfigApplicationContext设置环境的activeProfile")])])}),[],!1,null,null,null);t.default=s.exports}}]);