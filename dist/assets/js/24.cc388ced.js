(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{499:function(a,e,t){"use strict";t.r(e);var r=t(5),n=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"synchronized的底层实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized的底层实现"}},[a._v("#")]),a._v(" synchronized的底层实现：")]),a._v(" "),t("p",[a._v("synchronized代码块是由一对儿monitorenter/monitorexit指令实现的，Monitor对象是同步的基本实现单元。")]),a._v(" "),t("p",[a._v("现代jdk中，jvm提供了三种不同的monitor实现，也就是常说的三种不同的锁："),t("strong",[a._v("偏斜锁、轻量级锁、重量级锁")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("所谓锁的升级、降级")]),a._v("，就是JVM优化synchronized运行的机制，当JVM检测到不同的竞争状况时，会自动切换到适合的锁实现，这种切换就是锁的升级、降级。")]),a._v(" "),t("p",[a._v("当没有竞争出现时，默认会使用偏斜锁。JVM会利用CAS操作（compare and swap），在对象头上的Mark Word部分设置线程ID，以表示这个对象偏向于当前线程，所以并不涉及真正的互斥锁。这样做的假设是基于在很多应用场景中，大部分对象生命周期中最多会被一个线程锁定，使用偏斜锁可以降低无竞争开销。如果有另外的线程试图锁定某个已经被偏斜过的对象，JVM就需要撤销（revoke）偏斜锁，并切换到轻量级锁实现。轻量级锁依赖CAS操作Mark Word来试图获取锁，如果重试成功，就使用普通的轻量级锁；否则，进一步升级为重量级锁。")]),a._v(" "),t("h2",{attrs:{id:"synchronized和volatile变量区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized和volatile变量区别"}},[a._v("#")]),a._v(" synchronized和volatile变量区别：")]),a._v(" "),t("ol",[t("li",[a._v("volatile是一种稍弱的同步机制，在访问volatile变量时，不执行加锁操作，因此不会使线程阻塞，比synchronized更轻量。")]),a._v(" "),t("li",[a._v("从内存可见性的角度看，写入 volatile 变量相当于退出同步代码块，而读取 volatile 变量相当于进入同步代码块。")]),a._v(" "),t("li",[a._v("加锁机制（即同步机制）既可以确保可见性又可以确保原子性，而 volatile 变量只能确保可见性，原因是声明为 volatile 的简单变量如果当前值与该变量以前的值相关，那么 volatile 关键字不起作用，也就是说如下的表达式都不是原子操作：count++、count = count+1")])]),a._v(" "),t("h2",{attrs:{id:"使用volatile变量的场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用volatile变量的场景"}},[a._v("#")]),a._v(" 使用volatile变量的场景：")]),a._v(" "),t("ol",[t("li",[a._v("对变量的写入操作不依赖变量的当前值，或者确保只有单个线程更新变量的值。")]),a._v(" "),t("li",[a._v("该变量没有包含在具有其他变量的不变式中。")])]),a._v(" "),t("h4",{attrs:{id:"在需要同步时-第一选择应该使用synchronized关键字。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在需要同步时-第一选择应该使用synchronized关键字。"}},[a._v("#")]),a._v(" 在需要同步时，第一选择应该使用synchronized关键字。")]),a._v(" "),t("h2",{attrs:{id:"cas-compareandswap-是一种乐观锁技术-适用于多读少写的场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cas-compareandswap-是一种乐观锁技术-适用于多读少写的场景"}},[a._v("#")]),a._v(" CAS（compareAndSwap）是一种乐观锁技术，适用于多读少写的场景")]),a._v(" "),t("p",[a._v("​       当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。")]),a._v(" "),t("p",[a._v("​       CAS 操作中包含三个操作数 —— 需要读写的内存位置（V）、进行比较的预期原值（A）和拟写入的新值(B)。如果内存位置V的值与预期原值A相匹配，那么处理器会自动将该位置值更新为新值B。否则处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前值。）CAS 有效地说明了“ 我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。 ”这其实和乐观锁的冲突检查+数据更新的原理是一样的。")]),a._v(" "),t("p",[a._v("缺点：")]),a._v(" "),t("ol",[t("li",[t("h4",{attrs:{id:"aba问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aba问题"}},[a._v("#")]),a._v(" ABA问题：")]),a._v(" "),t("p",[a._v("比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但可能存在潜藏的问题。")])]),a._v(" "),t("li",[t("h4",{attrs:{id:"循环时间长开销大"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环时间长开销大"}},[a._v("#")]),a._v(" 循环时间长开销大：")]),a._v(" "),t("p",[a._v("自旋CAS（不成功，就一直循环执行，直到成功）如果长时间不成功，会给CPU带来非常大的执行开销。如果JVM能支持处理器提供的pause指令那么效率会有一定的提升，pause指令有两个作用，第一它可以延迟流水线执行指令（de-pipeline）,使CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。第二它可以避免在退出循环的时候因内存顺序冲突（memory order violation）而引起CPU流水线被清空（CPU pipeline flush），从而提高CPU的执行效率。")])]),a._v(" "),t("li",[t("h4",{attrs:{id:"只能保证一个共享变量的原子操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#只能保证一个共享变量的原子操作"}},[a._v("#")]),a._v(" 只能保证一个共享变量的原子操作：")]),a._v(" "),t("p",[a._v("从Java1.5开始JDK提供了"),t("strong",[a._v("AtomicReference")]),a._v("类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。")])])]),a._v(" "),t("h4",{attrs:{id:"cas与synchronized的使用情景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cas与synchronized的使用情景"}},[a._v("#")]),a._v(" CAS与Synchronized的使用情景：")]),a._v(" "),t("p",[a._v("1、对于资源竞争较少（线程冲突较轻）的情况，使用synchronized同步锁进行线程阻塞和唤醒切换以及用户态内核态间的切换操作额外浪费消耗cpu资源；而CAS基于硬件实现，不需要进入内核，不需要切换线程，操作自旋几率较少，因此可以获得更高的性能。")]),a._v(" "),t("p",[a._v("2、对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。")]),a._v(" "),t("p",[a._v("补充： synchronized在jdk1.6之后，已经改进优化。synchronized的底层实现主要依靠Lock-Free的队列，基本思路是自旋后阻塞，竞争切换后继续竞争锁，稍微牺牲了公平性，但获得了高吞吐量。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突严重的情况下，性能远高于CAS。")]),a._v(" "),t("p",[a._v("自旋锁：竞争锁的失败的线程，并不会真实的在操作系统层面挂起等待，而是JVM会让线程做几个空循环(基于预测在不久的将来就能获得)，在经过若干次循环后，如果可以获得锁，那么进入临界区，如果还不能获得锁，才会真实的将线程在操作系统层面进行挂起。")]),a._v(" "),t("h3",{attrs:{id:"reentrantlock和synchronize区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock和synchronize区别"}},[a._v("#")]),a._v(" "),t("strong",[a._v("ReentrantLock和Synchronize区别：")])]),a._v(" "),t("p",[t("strong",[a._v("锁的实现：")])]),a._v(" "),t("p",[a._v("Synchronized是依赖于JVM实现的，而ReenTrantLock是JDK实现的，有什么区别，说白了就类似于操作系统来控制实现和用户自己敲代码实现的区别。前者的实现是比较难见到的，后者有直接的源码可供阅读。")]),a._v(" "),t("p",[t("strong",[a._v("便利性：")])]),a._v(" "),t("p",[a._v("很明显Synchronized的使用比较方便简洁，并且由编译器去保证锁的加锁和释放，而ReenTrantLock需要手工声明来加锁和释放锁，为了避免忘记手工释放锁造成死锁，所以最好在finally中声明释放锁。")]),a._v(" "),t("p",[t("strong",[a._v("ReenTrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。")])])])}),[],!1,null,null,null);e.default=n.exports}}]);