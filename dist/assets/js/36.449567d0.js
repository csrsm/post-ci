(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{519:function(t,e,s){"use strict";s.r(e);var a=s(5),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("单元测试  JUnit5")]),t._v(" "),s("h1",{attrs:{id:"springboot2核心技术-单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springboot2核心技术-单元测试"}},[t._v("#")]),t._v(" SpringBoot2核心技术-单元测试")]),t._v(" "),s("h1",{attrs:{id:"单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),s("h1",{attrs:{id:"_1、junit5-的变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、junit5-的变化"}},[t._v("#")]),t._v(" 1、JUnit5 的变化")]),t._v(" "),s("p",[s("strong",[t._v("Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库")])]),t._v(" "),s("p",[t._v("作为最新版本的JUnit框架，JUnit5与之前版本的Junit框架有很大的不同。由三个不同子项目的几个不同模块组成。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage")])])]),t._v(" "),s("p",[s("strong",[t._v("JUnit Platform")]),t._v(": Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。")]),t._v(" "),s("p",[s("strong",[t._v("JUnit Jupiter")]),t._v(": JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部 包含了一个"),s("strong",[t._v("测试引擎")]),t._v("，用于在Junit Platform上运行。")]),t._v(" "),s("p",[s("strong",[t._v("JUnit Vintage")]),t._v(": 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x,Junit3.x的测试引擎。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606796395719-eb57ab48-ae44-45e5-8d2e-c4d507aff49a.png",alt:"image"}})]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("p",[s("strong",[t._v("SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test）")])]),t._v(" "),s("p",[s("strong",[t._v("JUnit 5’s Vintage Engine Removed from")]),t._v(" "),s("strong",[t._v("spring-boot-starter-test,如果需要继续兼容junit4需要自行引入vintage")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<dependency>\n    <groupId>org.junit.vintage</groupId>\n    <artifactId>junit-vintage-engine</artifactId>\n    <scope>test</scope>\n    <exclusions>\n        <exclusion>\n            <groupId>org.hamcrest</groupId>\n            <artifactId>hamcrest-core</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n")])])]),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606797616337-e73010e9-9cac-496d-a177-64b677af5a3d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-test</artifactId>\n  <scope>test</scope>\n</dependency>\n")])])]),s("p",[t._v("现在版本：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("@SpringBootTest\nclass Boot05WebAdminApplicationTests {\n\n\n    @Test\n    void contextLoads() {\n\n    }\n}\n")])])]),s("p",[t._v("以前：")]),t._v(" "),s("p",[t._v("@SpringBootTest + @RunWith(SpringTest.class)")]),t._v(" "),s("p",[t._v("SpringBoot整合Junit以后。")]),t._v(" "),s("ul",[s("li",[t._v("编写测试方法：@Test标注（注意需要使用junit5版本的注解）")]),t._v(" "),s("li",[t._v("Junit类具有Spring的功能，@Autowired、比如 @Transactional 标注测试方法，测试完成后自动回滚")])]),t._v(" "),s("h1",{attrs:{id:"_2、junit5常用注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、junit5常用注解"}},[t._v("#")]),t._v(" 2、JUnit5常用注解")]),t._v(" "),s("p",[t._v("JUnit5的注解与JUnit4的注解有所变化")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("**@Test 😗*表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试")]),t._v(" "),s("li",[t._v("**@ParameterizedTest 😗*表示方法是参数化测试，下方会有详细介绍")]),t._v(" "),s("li",[t._v("**@RepeatedTest 😗*表示方法可重复执行，下方会有详细介绍")]),t._v(" "),s("li",[t._v("**@DisplayName 😗*为测试类或者测试方法设置展示名称")]),t._v(" "),s("li",[t._v("**@BeforeEach 😗*表示在每个单元测试之前执行")]),t._v(" "),s("li",[t._v("**@AfterEach 😗*表示在每个单元测试之后执行")]),t._v(" "),s("li",[t._v("**@BeforeAll 😗*表示在所有单元测试之前执行")]),t._v(" "),s("li",[t._v("**@AfterAll 😗*表示在所有单元测试之后执行")]),t._v(" "),s("li",[t._v("**@Tag 😗*表示单元测试类别，类似于JUnit4中的@Categories")]),t._v(" "),s("li",[t._v("**@Disabled 😗*表示测试类或测试方法不执行，类似于JUnit4中的@Ignore")]),t._v(" "),s("li",[t._v("**@Timeout 😗*表示测试方法运行如果超过了指定时间将会返回错误")]),t._v(" "),s("li",[t._v("**@ExtendWith 😗*为测试类或测试方法提供扩展类引用")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('import org.junit.jupiter.api.Test; //注意这里使用的是jupiter的Test注解！！\n\n\npublic class TestDemo {\n\n  @Test\n  @DisplayName("第一次测试")\n  public void firstTest() {\n      System.out.println("hello world");\n  }\n')])])]),s("h1",{attrs:{id:"_3、断言-assertions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、断言-assertions"}},[t._v("#")]),t._v(" 3、断言（assertions）")]),t._v(" "),s("p",[t._v("断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。"),s("strong",[t._v("这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法")]),t._v("。JUnit 5 内置的断言可以分成如下几个类别：")]),t._v(" "),s("p",[s("strong",[t._v("检查业务逻辑返回的数据是否合理。")])]),t._v(" "),s("p",[s("strong",[t._v("所有的测试运行结束以后，会有一个详细的测试报告；")])]),t._v(" "),s("h2",{attrs:{id:"_1、简单断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、简单断言"}},[t._v("#")]),t._v(" 1、简单断言")]),t._v(" "),s("p",[t._v("用来对单个值进行简单的验证。如：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("方法")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("assertEquals")]),t._v(" "),s("td",[t._v("判断两个对象或两个原始类型是否相等")])]),t._v(" "),s("tr",[s("td",[t._v("assertNotEquals")]),t._v(" "),s("td",[t._v("判断两个对象或两个原始类型是否不相等")])]),t._v(" "),s("tr",[s("td",[t._v("assertSame")]),t._v(" "),s("td",[t._v("判断两个对象引用是否指向同一个对象")])]),t._v(" "),s("tr",[s("td",[t._v("assertNotSame")]),t._v(" "),s("td",[t._v("判断两个对象引用是否指向不同的对象")])]),t._v(" "),s("tr",[s("td",[t._v("assertTrue")]),t._v(" "),s("td",[t._v("判断给定的布尔值是否为 true")])]),t._v(" "),s("tr",[s("td",[t._v("assertFalse")]),t._v(" "),s("td",[t._v("判断给定的布尔值是否为 false")])]),t._v(" "),s("tr",[s("td",[t._v("assertNull")]),t._v(" "),s("td",[t._v("判断给定的对象引用是否为 null")])]),t._v(" "),s("tr",[s("td",[t._v("assertNotNull")]),t._v(" "),s("td",[t._v("判断给定的对象引用是否不为 null")])])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@Test\n@DisplayName("simple assertion")\npublic void simple() {\n     assertEquals(3, 1 + 2, "simple math");\n     assertNotEquals(3, 1 + 1);\n\n     assertNotSame(new Object(), new Object());\n     Object obj = new Object();\n     assertSame(obj, obj);\n\n     assertFalse(1 > 2);\n     assertTrue(1 < 2);\n\n     assertNull(null);\n     assertNotNull(new Object());\n}\n')])])]),s("h2",{attrs:{id:"_2、数组断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、数组断言"}},[t._v("#")]),t._v(" 2、数组断言")]),t._v(" "),s("p",[t._v("通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@Test\n@DisplayName("array assertion")\npublic void array() {\n assertArrayEquals(new int[]{1, 2}, new int[] {1, 2});\n}\n')])])]),s("h2",{attrs:{id:"_3、组合断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、组合断言"}},[t._v("#")]),t._v(" 3、组合断言")]),t._v(" "),s("p",[t._v("assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@Test\n@DisplayName("assert all")\npublic void all() {\n assertAll("Math",\n    () -> assertEquals(2, 1 + 1),\n    () -> assertTrue(1 > 0)\n );\n}\n')])])]),s("h2",{attrs:{id:"_4、异常断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、异常断言"}},[t._v("#")]),t._v(" 4、异常断言")]),t._v(" "),s("p",[t._v("在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule"),s("strong",[t._v("注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式")]),t._v("Assertions.assertThrows()** ,配合函数式编程就可以进行使用。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@Test\n@DisplayName("异常测试")\npublic void exceptionTest() {\n    ArithmeticException exception = Assertions.assertThrows(\n           //扔出断言异常\n            ArithmeticException.class, () -> System.out.println(1 % 0));\n\n}\n')])])]),s("h2",{attrs:{id:"_5、超时断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、超时断言"}},[t._v("#")]),t._v(" 5、超时断言")]),t._v(" "),s("p",[t._v("Junit5还提供了"),s("strong",[t._v("Assertions.assertTimeout()")]),t._v(" 为测试方法设置了超时时间")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@Test\n@DisplayName("超时测试")\npublic void timeoutTest() {\n    //如果测试方法时间超过1s将会异常\n    Assertions.assertTimeout(Duration.ofMillis(1000), () -> Thread.sleep(500));\n}\n')])])]),s("h2",{attrs:{id:"_6、快速失败"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、快速失败"}},[t._v("#")]),t._v(" 6、快速失败")]),t._v(" "),s("p",[t._v("通过 fail 方法直接使得测试失败")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@Test\n@DisplayName("fail")\npublic void shouldFail() {\n fail("This should fail");\n}\n')])])]),s("h1",{attrs:{id:"_4、前置条件-assumptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、前置条件-assumptions"}},[t._v("#")]),t._v(" 4、前置条件（assumptions）")]),t._v(" "),s("p",[t._v("JUnit 5 中的前置条件（"),s("strong",[t._v("assumptions【假设】")]),t._v("）类似于断言，不同之处在于"),s("strong",[t._v("不满足的断言会使得测试方法失败")]),t._v("，而不满足的"),s("strong",[t._v("前置条件只会使得测试方法的执行终止")]),t._v("。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@DisplayName("前置条件")\npublic class AssumptionsTest {\n private final String environment = "DEV";\n \n @Test\n @DisplayName("simple")\n public void simpleAssume() {\n    assumeTrue(Objects.equals(this.environment, "DEV"));\n    assumeFalse(() -> Objects.equals(this.environment, "PROD"));\n }\n \n @Test\n @DisplayName("assume then do")\n public void assumeThenDo() {\n    assumingThat(\n       Objects.equals(this.environment, "DEV"),\n       () -> System.out.println("In DEV")\n    );\n }\n}\n')])])]),s("p",[t._v("assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。")]),t._v(" "),s("h1",{attrs:{id:"_5、嵌套测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、嵌套测试"}},[t._v("#")]),t._v(" 5、嵌套测试")]),t._v(" "),s("p",[t._v("JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@DisplayName("A stack")\nclass TestingAStackDemo {\n\n    Stack<Object> stack;\n\n    @Test\n    @DisplayName("is instantiated with new Stack()")\n    void isInstantiatedWithNew() {\n        new Stack<>();\n    }\n\n    @Nested\n    @DisplayName("when new")\n    class WhenNew {\n\n        @BeforeEach\n        void createNewStack() {\n            stack = new Stack<>();\n        }\n\n        @Test\n        @DisplayName("is empty")\n        void isEmpty() {\n            assertTrue(stack.isEmpty());\n        }\n\n        @Test\n        @DisplayName("throws EmptyStackException when popped")\n        void throwsExceptionWhenPopped() {\n            assertThrows(EmptyStackException.class, stack::pop);\n        }\n\n        @Test\n        @DisplayName("throws EmptyStackException when peeked")\n        void throwsExceptionWhenPeeked() {\n            assertThrows(EmptyStackException.class, stack::peek);\n        }\n\n        @Nested\n        @DisplayName("after pushing an element")\n        class AfterPushing {\n\n            String anElement = "an element";\n\n            @BeforeEach\n            void pushAnElement() {\n                stack.push(anElement);\n            }\n\n            @Test\n            @DisplayName("it is no longer empty")\n            void isNotEmpty() {\n                assertFalse(stack.isEmpty());\n            }\n\n            @Test\n            @DisplayName("returns the element when popped and is empty")\n            void returnElementWhenPopped() {\n                assertEquals(anElement, stack.pop());\n                assertTrue(stack.isEmpty());\n            }\n\n            @Test\n            @DisplayName("returns the element when peeked but remains not empty")\n            void returnElementWhenPeeked() {\n                assertEquals(anElement, stack.peek());\n                assertFalse(stack.isEmpty());\n            }\n        }\n    }\n}\n')])])]),s("h1",{attrs:{id:"_6、参数化测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、参数化测试"}},[t._v("#")]),t._v(" 6、参数化测试")]),t._v(" "),s("p",[t._v("参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。")]),t._v(" "),s("p",[t._v("利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。")]),t._v(" "),s("p",[s("strong",[t._v("@ValueSource")]),t._v(": 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型")]),t._v(" "),s("p",[s("strong",[t._v("@NullSource")]),t._v(": 表示为参数化测试提供一个null的入参")]),t._v(" "),s("p",[s("strong",[t._v("@EnumSource")]),t._v(": 表示为参数化测试提供一个枚举入参")]),t._v(" "),s("p",[s("strong",[t._v("@CsvFileSource")]),t._v("：表示读取指定CSV文件内容作为参数化测试入参")]),t._v(" "),s("p",[s("strong",[t._v("@MethodSource")]),t._v("：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)")]),t._v(" "),s("blockquote",[s("p",[t._v("当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现"),s("strong",[t._v("ArgumentsProvider")]),t._v("接口，任何外部文件都可以作为它的入参。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('@ParameterizedTest\n@ValueSource(strings = {"one", "two", "three"})\n@DisplayName("参数化测试1")\npublic void parameterizedTest1(String string) {\n    System.out.println(string);\n    Assertions.assertTrue(StringUtils.isNotBlank(string));\n}\n\n\n@ParameterizedTest\n@MethodSource("method")    //指定方法名\n@DisplayName("方法来源参数")\npublic void testWithExplicitLocalMethodSource(String name) {\n    System.out.println(name);\n    Assertions.assertNotNull(name);\n}\n\nstatic Stream<String> method() {\n    return Stream.of("apple", "banana");\n}\n')])])]),s("h1",{attrs:{id:"_7、迁移指南"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、迁移指南"}},[t._v("#")]),t._v(" 7、迁移指南")]),t._v(" "),s("p",[t._v("在进行迁移的时候需要注意如下的变化：")]),t._v(" "),s("ul",[s("li",[t._v("注解在 org.junit.jupiter.api 包中，断言在 org.junit.jupiter.api.Assertions 类中，前置条件在 org.junit.jupiter.api.Assumptions 类中。")]),t._v(" "),s("li",[t._v("把@Before 和@After 替换成@BeforeEach 和@AfterEach。")]),t._v(" "),s("li",[t._v("把@BeforeClass 和@AfterClass 替换成@BeforeAll 和@AfterAll。")]),t._v(" "),s("li",[t._v("把@Ignore 替换成@Disabled。")]),t._v(" "),s("li",[t._v("把@Category 替换成@Tag。")]),t._v(" "),s("li",[t._v("把@RunWith、@Rule 和@ClassRule 替换成@ExtendWith。")])])])}),[],!1,null,null,null);e.default=n.exports}}]);