(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{518:function(t,r,e){"use strict";e.r(r);var n=e(5),i=Object(n.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("原理解析")]),t._v(" "),e("h1",{attrs:{id:"springboot2核心技术-原理解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot2核心技术-原理解析"}},[t._v("#")]),t._v(" SpringBoot2核心技术-原理解析")]),t._v(" "),e("h1",{attrs:{id:"原理解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理解析"}},[t._v("#")]),t._v(" 原理解析")]),t._v(" "),e("h1",{attrs:{id:"_1、profile功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、profile功能"}},[t._v("#")]),t._v(" 1、Profile功能")]),t._v(" "),e("p",[t._v("为了方便多环境适配，springboot简化了profile功能。")]),t._v(" "),e("h2",{attrs:{id:"_1、application-profile功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、application-profile功能"}},[t._v("#")]),t._v(" 1、application-profile功能")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("默认配置文件  application.yaml；任何时候都会加载")])]),t._v(" "),e("li",[e("p",[t._v("指定环境配置文件  application-{env}.yaml")])]),t._v(" "),e("li",[e("p",[t._v("激活指定环境")])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("配置文件激活")]),t._v(" "),e("li",[t._v("命令行激活：java -jar xxx.jar --"),e("strong",[t._v("spring.profiles.active=prod  --person.name=haha")])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[e("strong",[t._v("修改配置文件的任意值，命令行优先")])])])])])]),t._v(" "),e("li",[e("p",[t._v("默认配置与环境配置同时生效")])]),t._v(" "),e("li",[e("p",[t._v("同名配置项，profile配置优先")])])]),t._v(" "),e("h2",{attrs:{id:"_2、-profile条件装配功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、-profile条件装配功能"}},[t._v("#")]),t._v(" 2、@Profile条件装配功能")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('@Configuration(proxyBeanMethods = false)\n@Profile("production")\npublic class ProductionConfiguration {\n\n    // ...\n\n}\n')])])]),e("h2",{attrs:{id:"_3、profile分组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、profile分组"}},[t._v("#")]),t._v(" 3、profile分组")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("spring.profiles.group.production[0]=proddb\nspring.profiles.group.production[1]=prodmq\n\n使用：--spring.profiles.active=production  激活\n")])])]),e("h1",{attrs:{id:"_2、外部化配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、外部化配置"}},[t._v("#")]),t._v(" 2、外部化配置")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),e("ol",[e("li",[t._v("Default properties (specified by setting "),e("code",[t._v("SpringApplication.setDefaultProperties")]),t._v(").")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/context/annotation/PropertySource.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("@PropertySource")]),e("OutboundLink")],1),t._v(" annotations on your "),e("code",[t._v("@Configuration")]),t._v(" classes. Please note that such property sources are not added to the "),e("code",[t._v("Environment")]),t._v(" until the application context is being refreshed. This is too late to configure certain properties such as "),e("code",[t._v("logging.*")]),t._v(" and "),e("code",[t._v("spring.main.*")]),t._v(" which are read before refresh begins.")]),t._v(" "),e("li",[e("strong",[t._v("Config data (such as")]),t._v(" "),e("strong",[t._v("application.properties")]),t._v(" "),e("strong",[t._v("files)")])]),t._v(" "),e("li",[t._v("A "),e("code",[t._v("RandomValuePropertySource")]),t._v(" that has properties only in "),e("code",[t._v("random.*")]),t._v(".")]),t._v(" "),e("li",[t._v("OS environment variables.")]),t._v(" "),e("li",[t._v("Java System properties ("),e("code",[t._v("System.getProperties()")]),t._v(").")]),t._v(" "),e("li",[t._v("JNDI attributes from "),e("code",[t._v("java:comp/env")]),t._v(".")]),t._v(" "),e("li",[e("code",[t._v("ServletContext")]),t._v(" init parameters.")]),t._v(" "),e("li",[e("code",[t._v("ServletConfig")]),t._v(" init parameters.")]),t._v(" "),e("li",[t._v("Properties from "),e("code",[t._v("SPRING_APPLICATION_JSON")]),t._v(" (inline JSON embedded in an environment variable or system property).")]),t._v(" "),e("li",[t._v("Command line arguments.")]),t._v(" "),e("li",[e("code",[t._v("properties")]),t._v(" attribute on your tests. Available on "),e("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/2.4.0/api/org/springframework/boot/test/context/SpringBootTest.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("@SpringBootTest")]),e("OutboundLink")],1),t._v(" and the "),e("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests",target:"_blank",rel:"noopener noreferrer"}},[t._v("test annotations for testing a particular slice of your application"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://docs.spring.io/spring/docs/5.3.1/javadoc-api/org/springframework/test/context/TestPropertySource.html",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("@TestPropertySource")]),e("OutboundLink")],1),t._v(" annotations on your tests.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-devtools-globalsettings",target:"_blank",rel:"noopener noreferrer"}},[t._v("Devtools global settings properties"),e("OutboundLink")],1),t._v(" in the "),e("code",[t._v("$HOME/.config/spring-boot")]),t._v(" directory when devtools is active.")])]),t._v(" "),e("h2",{attrs:{id:"_1、外部配置源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、外部配置源"}},[t._v("#")]),t._v(" 1、外部配置源")]),t._v(" "),e("p",[t._v("常用："),e("strong",[t._v("Java属性文件")]),t._v("、"),e("strong",[t._v("YAML文件")]),t._v("、"),e("strong",[t._v("环境变量")]),t._v("、"),e("strong",[t._v("命令行参数")]),t._v("；")]),t._v(" "),e("h2",{attrs:{id:"_2、配置文件查找位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、配置文件查找位置"}},[t._v("#")]),t._v(" 2、配置文件查找位置")]),t._v(" "),e("p",[t._v("(1) classpath 根路径")]),t._v(" "),e("p",[t._v("(2) classpath 根路径下config目录")]),t._v(" "),e("p",[t._v("(3) jar包当前目录")]),t._v(" "),e("p",[t._v("(4) jar包当前目录的config目录")]),t._v(" "),e("p",[t._v("(5) /config子目录的直接子目录")]),t._v(" "),e("h2",{attrs:{id:"_3、配置文件加载顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、配置文件加载顺序"}},[t._v("#")]),t._v(" 3、配置文件加载顺序：")]),t._v(" "),e("ol",[e("li",[t._v("当前jar包内部的application.properties和application.yml")]),t._v(" "),e("li",[t._v("当前jar包内部的application-{profile}.properties 和 application-{profile}.yml")]),t._v(" "),e("li",[t._v("引用的外部jar包的application.properties和application.yml")]),t._v(" "),e("li",[t._v("引用的外部jar包的application-{profile}.properties 和 application-{profile}.yml")])]),t._v(" "),e("h2",{attrs:{id:"_4、指定环境优先-外部优先-后面的可以覆盖前面的同名配置项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、指定环境优先-外部优先-后面的可以覆盖前面的同名配置项"}},[t._v("#")]),t._v(" 4、指定环境优先，外部优先，后面的可以覆盖前面的同名配置项")]),t._v(" "),e("h1",{attrs:{id:"_3、自定义starter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、自定义starter"}},[t._v("#")]),t._v(" 3、自定义starter")]),t._v(" "),e("h2",{attrs:{id:"_1、starter启动原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、starter启动原理"}},[t._v("#")]),t._v(" 1、starter启动原理")]),t._v(" "),e("ul",[e("li",[t._v("starter-pom引入 autoconfigurer 包")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1606995919308-b2c7ccaa-e720-4cc5-9801-2e170b3102e1.png",alt:"img"}})]),t._v(" "),e("ul",[e("li",[e("p",[t._v("autoconfigure包中配置使用 "),e("strong",[t._v("META-INF/spring.factories")]),t._v(" 中 "),e("strong",[t._v("EnableAutoConfiguration 的值，使得项目启动加载指定的自动配置类")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("编写自动配置类 xxxAutoConfiguration -> xxxxProperties")])])]),t._v(" "),e("li",[e("ul",[e("li",[e("strong",[t._v("@Configuration")])]),t._v(" "),e("li",[e("strong",[t._v("@Conditional")])]),t._v(" "),e("li",[e("strong",[t._v("@EnableConfigurationProperties")])]),t._v(" "),e("li",[e("strong",[t._v("@Bean")])]),t._v(" "),e("li",[t._v("......")])])])]),t._v(" "),e("p",[e("strong",[t._v("引入starter")]),t._v(" "),e("strong",[t._v("--- xxxAutoConfiguration --- 容器中放入组件 ---- 绑定xxxProperties ----")]),t._v(" "),e("strong",[t._v("配置项")])]),t._v(" "),e("h2",{attrs:{id:"_2、自定义starter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、自定义starter"}},[t._v("#")]),t._v(" 2、自定义starter")]),t._v(" "),e("p",[e("strong",[t._v("atguigu-hello-spring-boot-starter（启动器）")])]),t._v(" "),e("p",[e("strong",[t._v("atguigu-hello-spring-boot-starter-autoconfigure（自动配置包）")])]),t._v(" "),e("h1",{attrs:{id:"_4、springboot原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、springboot原理"}},[t._v("#")]),t._v(" 4、SpringBoot原理")]),t._v(" "),e("p",[t._v("Spring原理【"),e("a",{attrs:{href:"https://www.bilibili.com/video/BV1gW411W7wy?p=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring注解"),e("OutboundLink")],1),t._v("】、"),e("strong",[t._v("SpringMVC")]),t._v("原理、"),e("strong",[t._v("自动配置原理")]),t._v("、SpringBoot原理")]),t._v(" "),e("h2",{attrs:{id:"_1、springboot启动过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、springboot启动过程"}},[t._v("#")]),t._v(" 1、SpringBoot启动过程")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("创建 "),e("strong",[t._v("SpringApplication")])])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("保存一些信息。")]),t._v(" "),e("li",[t._v("判定当前应用的类型。ClassUtils。Servlet")]),t._v(" "),e("li",[e("strong",[t._v("bootstrappers")]),t._v("**：初始启动引导器（"),e("strong",[t._v("List"),e("Bootstrapper")],1),t._v("）：去spring.factories文件中找** org.springframework.boot."),e("strong",[t._v("Bootstrapper")])]),t._v(" "),e("li",[t._v("找 "),e("strong",[t._v("ApplicationContextInitializer")]),t._v("；去"),e("strong",[t._v("spring.factories****找")]),t._v(" "),e("strong",[t._v("ApplicationContextInitializer")])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[t._v("List<ApplicationContextInitializer<?>> "),e("strong",[t._v("initializers")])])])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("strong",[t._v("找")]),t._v(" "),e("strong",[t._v("ApplicationListener  ；应用监听器。"),e("strong",[t._v("去")]),t._v("spring.factories****找")]),t._v(" "),e("strong",[t._v("ApplicationListener")])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[t._v("List<ApplicationListener<?>> "),e("strong",[t._v("listeners")])])])])])]),t._v(" "),e("li",[e("p",[t._v("运行 "),e("strong",[t._v("SpringApplication")])])]),t._v(" "),e("li",[e("ul",[e("li",[e("strong",[t._v("StopWatch")])]),t._v(" "),e("li",[e("strong",[t._v("记录应用的启动时间")])]),t._v(" "),e("li",[t._v("**创建引导上下文（Context环境）**"),e("strong",[t._v("createBootstrapContext()")])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[t._v("获取到所有之前的 "),e("strong",[t._v("bootstrappers 挨个执行")]),t._v(" intitialize() 来完成对引导启动器上下文环境设置")])])])])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("让当前应用进入"),e("strong",[t._v("headless")]),t._v("模式。"),e("strong",[t._v("java.awt.headless")])]),t._v(" "),e("li",[e("strong",[t._v("获取所有")]),t._v(" "),e("strong",[t._v("RunListener")]),t._v("**（运行监听器）【为了方便所有Listener进行事件感知】**")])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[t._v("getSpringFactoriesInstances 去"),e("strong",[t._v("spring.factories****找")]),t._v(" "),e("strong",[t._v("SpringApplicationRunListener")]),t._v(".")])])])])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("遍历 "),e("strong",[t._v("SpringApplicationRunListener 调用 starting 方法；")])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[e("strong",[t._v("相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。")])])])])])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("保存命令行参数；ApplicationArguments")]),t._v(" "),e("li",[t._v("准备环境 prepareEnvironment（）;")])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[t._v("返回或者创建基础环境信息对象。"),e("strong",[t._v("StandardServletEnvironment")])]),t._v(" "),e("li",[e("strong",[t._v("配置环境信息对象。")])])])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[e("ul",[e("li",[e("strong",[t._v("读取所有的配置源的配置属性值。")])])])])])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[t._v("绑定环境信息")]),t._v(" "),e("li",[t._v("监听器调用 listener.environmentPrepared()；通知所有的监听器当前环境准备完成")])])])])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("创建IOC容器（createApplicationContext（））")])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[t._v("根据项目类型（Servlet）创建容器，")]),t._v(" "),e("li",[t._v("当前会创建 "),e("strong",[t._v("AnnotationConfigServletWebServerApplicationContext")])])])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("strong",[t._v("准备ApplicationContext IOC容器的基本信息")]),t._v(" "),e("strong",[t._v("prepareContext()")])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[t._v("保存环境信息")]),t._v(" "),e("li",[t._v("IOC容器的后置处理流程。")]),t._v(" "),e("li",[t._v("应用初始化器；applyInitializers；")])])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[e("ul",[e("li",[t._v("遍历所有的 "),e("strong",[t._v("ApplicationContextInitializer 。调用")]),t._v(" "),e("strong",[t._v("initialize.。来对ioc容器进行初始化扩展功能")])]),t._v(" "),e("li",[t._v("遍历所有的 listener 调用 "),e("strong",[t._v("contextPrepared。EventPublishRunListenr；通知所有的监听器contextPrepared")])])])])])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[e("strong",[t._v("所有的监听器 调用")]),t._v(" "),e("strong",[t._v("contextLoaded。通知所有的监听器 contextLoaded；")])])])])])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("**刷新IOC容器。**refreshContext")])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[t._v("创建容器中的所有组件（Spring注解）")])])])])]),t._v(" "),e("li",[e("ul",[e("li",[t._v("容器刷新完成后工作？afterRefresh")]),t._v(" "),e("li",[t._v("所有监听 器 调用 listeners."),e("strong",[t._v("started")]),t._v("(context); "),e("strong",[t._v("通知所有的监听器")]),t._v(" "),e("strong",[t._v("started")])]),t._v(" "),e("li",[t._v("**调用所有runners；**callRunners()")])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[e("strong",[t._v("获取容器中的")]),t._v(" "),e("strong",[t._v("ApplicationRunner")])]),t._v(" "),e("li",[e("strong",[t._v("获取容器中的")]),t._v(" "),e("strong",[t._v("CommandLineRunner")])]),t._v(" "),e("li",[e("strong",[t._v("合并所有runner并且按照@Order进行排序")])]),t._v(" "),e("li",[e("strong",[t._v("遍历所有的runner。调用 run")]),t._v(" "),e("strong",[t._v("方法")])])])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("strong",[t._v("如果以上有异常，")])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("ul",[e("li",[e("strong",[t._v("调用Listener 的 failed")])])])])])]),t._v(" "),e("li",[e("ul",[e("li",[e("strong",[t._v("调用所有监听器的 running 方法")]),t._v("  listeners.running(context); "),e("strong",[t._v("通知所有的监听器")]),t._v(" "),e("strong",[t._v("running")])]),t._v(" "),e("li",[t._v("**running如果有问题。继续通知 failed 。**"),e("strong",[t._v("调用所有 Listener 的")]),t._v(" **failed；**"),e("strong",[t._v("通知所有的监听器")]),t._v(" "),e("strong",[t._v("failed")])])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("public interface Bootstrapper {\n\n    /**\n     * Initialize the given {@link BootstrapRegistry} with any required registrations.\n     * @param registry the registry to initialize\n     */\n    void intitialize(BootstrapRegistry registry);\n\n}\n")])])]),e("p",[e("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1607005958877-bf152e3e-4d2d-42b6-a08c-ceef9870f3b6.png",alt:"image.png"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1607004823889-8373cea4-6305-40c1-af3b-921b071a28a8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1607006112013-6ed5c0a0-3e02-4bf1-bdb7-423e0a0b3f3c.png",alt:"image.png"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@FunctionalInterface\npublic interface ApplicationRunner {\n\n    /**\n     * Callback used to run the bean.\n     * @param args incoming application arguments\n     * @throws Exception on error\n     */\n    void run(ApplicationArguments args) throws Exception;\n\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@FunctionalInterface\npublic interface CommandLineRunner {\n\n    /**\n     * Callback used to run the bean.\n     * @param args incoming main method arguments\n     * @throws Exception on error\n     */\n    void run(String... args) throws Exception;\n\n}\n")])])]),e("h2",{attrs:{id:"-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")])]),t._v(" "),e("h2",{attrs:{id:"_2、application-events-and-listeners"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、application-events-and-listeners"}},[t._v("#")]),t._v(" 2、Application Events and Listeners")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("strong",[t._v("ApplicationContextInitializer")])]),t._v(" "),e("p",[e("strong",[t._v("ApplicationListener")])]),t._v(" "),e("p",[e("strong",[t._v("SpringApplicationRunListener")])]),t._v(" "),e("h2",{attrs:{id:"_3、applicationrunner-与-commandlinerunner"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、applicationrunner-与-commandlinerunner"}},[t._v("#")]),t._v(" 3、ApplicationRunner 与 CommandLineRunner")])])}),[],!1,null,null,null);r.default=i.exports}}]);