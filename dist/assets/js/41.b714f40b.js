(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{512:function(o,r,t){"use strict";t.r(r);var n=t(5),a=Object(n.a)({},(function(){var o=this,r=o.$createElement,t=o._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[t("p",[o._v("了解SpringBoot自动配置原理")]),o._v(" "),t("h1",{attrs:{id:"springboot2核心技术-核心功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springboot2核心技术-核心功能"}},[o._v("#")]),o._v(" SpringBoot2核心技术-核心功能")]),o._v(" "),t("h2",{attrs:{id:"了解自动配置原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#了解自动配置原理"}},[o._v("#")]),o._v(" 了解自动配置原理")]),o._v(" "),t("h3",{attrs:{id:"_1、springboot特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、springboot特点"}},[o._v("#")]),o._v(" 1、SpringBoot特点")]),o._v(" "),t("h4",{attrs:{id:"_1-1、依赖管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、依赖管理"}},[o._v("#")]),o._v(" 1.1、依赖管理")]),o._v(" "),t("ul",[t("li",[o._v("父项目做依赖管理")])]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("依赖管理    \n<parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.3.4.RELEASE</version>\n</parent>\n\n他的父项目\n <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-dependencies</artifactId>\n    <version>2.3.4.RELEASE</version>\n  </parent>\n\n几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制\n")])])]),t("ul",[t("li",[o._v("开发导入starter场景启动器")])]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("1、见到很多 spring-boot-starter-* ： *就某种场景\n2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入\n3、SpringBoot所有支持的场景\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter\n4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。\n5、所有场景启动器最底层的依赖\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter</artifactId>\n  <version>2.3.4.RELEASE</version>\n  <scope>compile</scope>\n</dependency>\n")])])]),t("ul",[t("li",[o._v("无需关注版本号，自动版本仲裁")])]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("1、引入依赖默认都可以不写版本\n2、引入非版本仲裁的jar，要写版本号。\n")])])]),t("ul",[t("li",[o._v("可以修改默认版本号")])]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。\n2、在当前项目里面重写配置\n    <properties>\n        <mysql.version>5.1.43</mysql.version>\n    </properties>\n")])])]),t("h5",{attrs:{id:"_1-2、自动配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、自动配置"}},[o._v("#")]),o._v(" 1.2、自动配置")]),o._v(" "),t("ul",[t("li",[o._v("自动配好Tomcat")]),o._v(" "),t("li",[t("ul",[t("li",[o._v("引入Tomcat依赖。")]),o._v(" "),t("li",[o._v("配置Tomcat")])])])]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("<dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-tomcat</artifactId>\n      <version>2.3.4.RELEASE</version>\n      <scope>compile</scope>\n    </dependency>\n")])])]),t("ul",[t("li",[o._v("自动配好SpringMVC")]),o._v(" "),t("li",[t("ul",[t("li",[o._v("引入SpringMVC全套组件")]),o._v(" "),t("li",[o._v("自动配好SpringMVC常用组件（功能）")])])]),o._v(" "),t("li",[o._v("自动配好Web常见功能，如：字符编码问题")]),o._v(" "),t("li",[t("ul",[t("li",[o._v("SpringBoot帮我们配置好了所有web开发的常见场景")])])]),o._v(" "),t("li",[o._v("默认的包结构")]),o._v(" "),t("li",[t("ul",[t("li",[o._v("主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来")]),o._v(" "),t("li",[o._v("无需以前的包扫描配置")]),o._v(" "),t("li",[o._v("想要改变扫描路径，@SpringBootApplication(scanBasePackages="),t("strong",[o._v('"com.atguigu"')]),o._v(")")])])]),o._v(" "),t("li",[t("ul",[t("li",[t("ul",[t("li",[o._v("或者@ComponentScan 指定扫描路径")])])])])])]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('@SpringBootApplication\n等同于\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan("com.atguigu.boot")\n')])])]),t("ul",[t("li",[o._v("各种配置拥有默认值")]),o._v(" "),t("li",[t("ul",[t("li",[o._v("默认配置最终都是映射到某个类上，如：MultipartProperties")]),o._v(" "),t("li",[o._v("配置文件的值最终会绑定每个类上，这个类会在容器中创建对象")])])]),o._v(" "),t("li",[o._v("按需加载所有自动配置项")]),o._v(" "),t("li",[t("ul",[t("li",[o._v("非常多的starter")]),o._v(" "),t("li",[o._v("引入了哪些场景这个场景的自动配置才会开启")]),o._v(" "),t("li",[o._v("SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面")]),o._v(" "),t("li")])]),o._v(" "),t("li",[o._v("......")])]),o._v(" "),t("h3",{attrs:{id:"_2、容器功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、容器功能"}},[o._v("#")]),o._v(" 2、容器功能")]),o._v(" "),t("h4",{attrs:{id:"_2-1、组件添加"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、组件添加"}},[o._v("#")]),o._v(" 2.1、组件添加")]),o._v(" "),t("h5",{attrs:{id:"_1、-configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-configuration"}},[o._v("#")]),o._v(" 1、@Configuration")]),o._v(" "),t("ul",[t("li",[o._v("基本使用")]),o._v(" "),t("li",[t("strong",[o._v("Full模式与Lite模式")])]),o._v(" "),t("li",[t("ul",[t("li",[o._v("示例")]),o._v(" "),t("li",[o._v("最佳实战")])])]),o._v(" "),t("li",[t("ul",[t("li",[t("ul",[t("li",[o._v("配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断")]),o._v(" "),t("li",[o._v("配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式")])])])])])]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('#############################Configuration使用示例######################################################\n/**\n * 1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的\n * 2、配置类本身也是组件\n * 3、proxyBeanMethods：代理bean的方法\n *      Full(proxyBeanMethods = true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】\n *      Lite(proxyBeanMethods = false)【每个@Bean方法被调用多少次返回的组件都是新创建的】\n *      组件依赖必须使用Full模式默认。其他默认是否Lite模式\n *\n *\n *\n */\n@Configuration(proxyBeanMethods = false) //告诉SpringBoot这是一个配置类 == 配置文件\npublic class MyConfig {\n\n    /**\n     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象\n     * @return\n     */\n    @Bean //给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例\n    public User user01(){\n        User zhangsan = new User("zhangsan", 18);\n        //user组件依赖了Pet组件\n        zhangsan.setPet(tomcatPet());\n        return zhangsan;\n    }\n\n    @Bean("tom")\n    public Pet tomcatPet(){\n        return new Pet("tomcat");\n    }\n}\n\n\n################################@Configuration测试代码如下########################################\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan("com.atguigu.boot")\npublic class MainApplication {\n\n    public static void main(String[] args) {\n        //1、返回我们IOC容器\n        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);\n\n        //2、查看容器里面的组件\n        String[] names = run.getBeanDefinitionNames();\n        for (String name : names) {\n            System.out.println(name);\n        }\n\n        //3、从容器中获取组件\n\n        Pet tom01 = run.getBean("tom", Pet.class);\n\n        Pet tom02 = run.getBean("tom", Pet.class);\n\n        System.out.println("组件："+(tom01 == tom02));\n\n\n        //4、com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892\n        MyConfig bean = run.getBean(MyConfig.class);\n        System.out.println(bean);\n\n        //如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。\n        //保持组件单实例\n        User user = bean.user01();\n        User user1 = bean.user01();\n        System.out.println(user == user1);\n\n\n        User user01 = run.getBean("user01", User.class);\n        Pet tom = run.getBean("tom", Pet.class);\n\n        System.out.println("用户的宠物："+(user01.getPet() == tom));\n\n\n\n    }\n}\n')])])]),t("h5",{attrs:{id:"_2、-bean、-component、-controller、-service、-repository"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、-bean、-component、-controller、-service、-repository"}},[o._v("#")]),o._v(" 2、@Bean、@Component、@Controller、@Service、@Repository")]),o._v(" "),t("h5",{attrs:{id:"_3、-componentscan、-import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、-componentscan、-import"}},[o._v("#")]),o._v(" 3、@ComponentScan、@Import")]),o._v(" "),t("h5",{attrs:{id:"_4、-import-user-class-dbhelper-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、-import-user-class-dbhelper-class"}},[o._v("#")]),o._v(" 4、@Import({User.class, DBHelper.class})")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("/*\n * 给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名\n */\n@Import({User.class, DBHelper.class})\n@Configuration(proxyBeanMethods = false) //告诉SpringBoot这是一个配置类 == 配置文件\npublic class MyConfig {\n}\n")])])]),t("h5",{attrs:{id:"_5、-conditional"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、-conditional"}},[o._v("#")]),o._v(" 5、@Conditional")]),o._v(" "),t("p",[o._v("条件装配：满足Conditional指定的条件，则进行组件注入")]),o._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602835786727-28b6f936-62f5-4fd6-a6c5-ae690bd1e31d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('=====================测试条件装配==========================\n@Configuration(proxyBeanMethods = false) //告诉SpringBoot这是一个配置类 == 配置文件\n//@ConditionalOnBean(name = "tom")\n@ConditionalOnMissingBean(name = "tom")\npublic class MyConfig {\n\n\n    /**\n     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象\n     * @return\n     */\n\n    @Bean //给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例\n    public User user01(){\n        User zhangsan = new User("zhangsan", 18);\n        //user组件依赖了Pet组件\n        zhangsan.setPet(tomcatPet());\n        return zhangsan;\n    }\n\n    @Bean("tom22")\n    public Pet tomcatPet(){\n        return new Pet("tomcat");\n    }\n}\n\npublic static void main(String[] args) {\n        //1、返回我们IOC容器\n        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);\n\n        //2、查看容器里面的组件\n        String[] names = run.getBeanDefinitionNames();\n        for (String name : names) {\n            System.out.println(name);\n        }\n\n        boolean tom = run.containsBean("tom");\n        System.out.println("容器中Tom组件："+tom);\n\n        boolean user01 = run.containsBean("user01");\n        System.out.println("容器中user01组件："+user01);\n\n        boolean tom22 = run.containsBean("tom22");\n        System.out.println("容器中tom22组件："+tom22);\n\n\n    }\n')])])]),t("h4",{attrs:{id:"_2-2、原生配置文件引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、原生配置文件引入"}},[o._v("#")]),o._v(" 2.2、原生配置文件引入")]),o._v(" "),t("h5",{attrs:{id:"_1、-importresource"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-importresource"}},[o._v("#")]),o._v(" 1、@ImportResource")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('======================beans.xml=========================\n<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n       xmlns:context="http://www.springframework.org/schema/context"\n       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">\n\n    <bean id="haha" class="com.atguigu.boot.bean.User">\n        <property name="name" value="zhangsan"></property>\n        <property name="age" value="18"></property>\n    </bean>\n\n    <bean id="hehe" class="com.atguigu.boot.bean.Pet">\n        <property name="name" value="tomcat"></property>\n    </bean>\n</beans>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('@ImportResource("classpath:beans.xml")\npublic class MyConfig {}\n\n======================测试=================\n        boolean haha = run.containsBean("haha");\n        boolean hehe = run.containsBean("hehe");\n        System.out.println("haha："+haha);//true\n        System.out.println("hehe："+hehe);//true\n')])])]),t("h4",{attrs:{id:"_2-3、配置绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、配置绑定"}},[o._v("#")]),o._v(" 2.3、配置绑定")]),o._v(" "),t("p",[o._v("如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('public class getProperties {\n     public static void main(String[] args) throws FileNotFoundException, IOException {\n         Properties pps = new Properties();\n         pps.load(new FileInputStream("a.properties"));\n         Enumeration enum1 = pps.propertyNames();//得到配置文件的名字\n         while(enum1.hasMoreElements()) {\n             String strKey = (String) enum1.nextElement();\n             String strValue = pps.getProperty(strKey);\n             System.out.println(strKey + "=" + strValue);\n             //封装到JavaBean。\n         }\n     }\n }\n')])])]),t("h5",{attrs:{id:"_1、-configurationproperties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-configurationproperties"}},[o._v("#")]),o._v(" 1、@ConfigurationProperties")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('/**\n * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能\n */\n@Component\n@ConfigurationProperties(prefix = "mycar")\npublic class Car {\n\n    private String brand;\n    private Integer price;\n\n    public String getBrand() {\n        return brand;\n    }\n\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n\n    public Integer getPrice() {\n        return price;\n    }\n\n    public void setPrice(Integer price) {\n        this.price = price;\n    }\n\n    @Override\n    public String toString() {\n        return "Car{" +\n                "brand=\'" + brand + \'\\\'\' +\n                ", price=" + price +\n                \'}\';\n    }\n}\n')])])]),t("h5",{attrs:{id:"_2、-enableconfigurationproperties-configurationproperties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、-enableconfigurationproperties-configurationproperties"}},[o._v("#")]),o._v(" 2、@EnableConfigurationProperties + @ConfigurationProperties")]),o._v(" "),t("h5",{attrs:{id:"_3、-component-configurationproperties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、-component-configurationproperties"}},[o._v("#")]),o._v(" 3、@Component + @ConfigurationProperties")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("@EnableConfigurationProperties(Car.class)\n//1、开启Car配置绑定功能\n//2、把这个Car这个组件自动注册到容器中\npublic class MyConfig {\n}\n")])])]),t("h3",{attrs:{id:"_3、自动配置原理入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、自动配置原理入门"}},[o._v("#")]),o._v(" 3、自动配置原理入门")]),o._v(" "),t("h4",{attrs:{id:"_3-1、引导加载自动配置类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、引导加载自动配置类"}},[o._v("#")]),o._v(" 3.1、引导加载自动配置类")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n        @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\npublic @interface SpringBootApplication{}\n\n\n======================\n")])])]),t("h5",{attrs:{id:"_1、-springbootconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-springbootconfiguration"}},[o._v("#")]),o._v(" 1、@SpringBootConfiguration")]),o._v(" "),t("p",[o._v("@Configuration。代表当前是一个配置类")]),o._v(" "),t("h5",{attrs:{id:"_2、-componentscan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、-componentscan"}},[o._v("#")]),o._v(" 2、@ComponentScan")]),o._v(" "),t("p",[o._v("指定扫描哪些，Spring注解；")]),o._v(" "),t("h5",{attrs:{id:"_3、-enableautoconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、-enableautoconfiguration"}},[o._v("#")]),o._v(" 3、@EnableAutoConfiguration")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {}\n")])])]),t("h6",{attrs:{id:"_1、-autoconfigurationpackage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-autoconfigurationpackage"}},[o._v("#")]),o._v(" 1、@AutoConfigurationPackage")]),o._v(" "),t("p",[o._v("自动配置包？指定了默认的包规则")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("@Import(AutoConfigurationPackages.Registrar.class)  //给容器中导入一个组件\npublic @interface AutoConfigurationPackage {}\n\n//利用Registrar给容器中导入一系列组件\n//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。\n")])])]),t("h6",{attrs:{id:"_2、-import-autoconfigurationimportselector-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、-import-autoconfigurationimportselector-class"}},[o._v("#")]),o._v(" 2、@Import(AutoConfigurationImportSelector.class)")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("1、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件\n2、调用List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类\n3、利用工厂加载 Map<String, List<String>> loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件\n4、从META-INF/spring.factories位置来加载一个文件。\n    默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件\n    spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories\n")])])]),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602845382065-5c41abf5-ee10-4c93-89e4-2a9b831c3ceb.png?x-oss-process=image%2Fresize%2Cw_746",alt:"image.png"}})]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("文件里面写死了spring-boot一启动就要给容器中加载的所有配置类\nspring-boot-autoconfigure-2.3.4.RELEASE.jar/META-INF/spring.factories\n# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\\norg.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\\norg.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\\\norg.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\\\norg.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\\\norg.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\\\norg.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\\\norg.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\\\norg.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\\\norg.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\\\norg.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\\\norg.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\\\norg.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\\\norg.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\\\norg.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\\\norg.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\\\norg.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\\\norg.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\\\norg.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\\\norg.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration\n")])])]),t("h4",{attrs:{id:"_3-2、按需开启自动配置项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、按需开启自动配置项"}},[o._v("#")]),o._v(" 3.2、按需开启自动配置项")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration\n按照条件装配规则（@Conditional），最终会按需配置。\n")])])]),t("h4",{attrs:{id:"_3-3、修改默认配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3、修改默认配置"}},[o._v("#")]),o._v(" 3.3、修改默认配置")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("@Bean\n@ConditionalOnBean(MultipartResolver.class)  //容器中有这个类型组件\n@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) //容器中没有这个名字 multipartResolver 的组件\npublic MultipartResolver multipartResolver(MultipartResolver resolver) {\n//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。\n//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范\n// Detect if the user has created a MultipartResolver but named it incorrectly\nreturn resolver;\n}\n给容器中加入了文件上传解析器；·\n")])])]),t("p",[o._v("SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("@Bean\n@ConditionalOnMissingBean\npublic CharacterEncodingFilter characterEncodingFilter() {\n}\n")])])]),t("p",[o._v("总结：")]),o._v(" "),t("ul",[t("li",[o._v("SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration")]),o._v(" "),t("li",[o._v("每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定")]),o._v(" "),t("li",[o._v("生效的配置类就会给容器中装配很多组件")]),o._v(" "),t("li",[o._v("只要容器中有这些组件，相当于这些功能就有了")]),o._v(" "),t("li",[o._v("定制化配置")]),o._v(" "),t("li",[t("ul",[t("li",[o._v("用户直接自己@Bean替换底层的组件")]),o._v(" "),t("li",[o._v("用户去看这个组件是获取的配置文件什么值就去修改。")])])])]),o._v(" "),t("p",[t("em",[t("strong",[o._v("xxxxxAutoConfiguration ---\x3e 组件  ---\x3e")]),o._v(" "),t("strong",[o._v("xxxxProperties里面拿值  ----\x3e application.properties")])])]),o._v(" "),t("h4",{attrs:{id:"_3-4、最佳实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4、最佳实践"}},[o._v("#")]),o._v(" 3.4、最佳实践")]),o._v(" "),t("ul",[t("li",[o._v("引入场景依赖")]),o._v(" "),t("li",[t("ul",[t("li",[t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter",target:"_blank",rel:"noopener noreferrer"}},[o._v("https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter"),t("OutboundLink")],1)])])]),o._v(" "),t("li",[o._v("查看自动配置了哪些（选做）")]),o._v(" "),t("li",[t("ul",[t("li",[o._v("自己分析，引入场景对应的自动配置一般都生效了")]),o._v(" "),t("li",[o._v("配置文件中debug=true开启自动配置报告。Negative（不生效）\\Positive（生效）")])])]),o._v(" "),t("li",[o._v("是否需要修改")]),o._v(" "),t("li",[t("ul",[t("li",[o._v("参照文档修改配置项")])])]),o._v(" "),t("li",[t("ul",[t("li",[t("ul",[t("li",[t("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties",target:"_blank",rel:"noopener noreferrer"}},[o._v("https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties"),t("OutboundLink")],1)]),o._v(" "),t("li",[o._v("自己分析。xxxxProperties绑定了配置文件的哪些。")])])])])]),o._v(" "),t("li",[t("ul",[t("li",[o._v("自定义加入或者替换组件")])])]),o._v(" "),t("li",[t("ul",[t("li",[t("ul",[t("li",[o._v("@Bean、@Component。。。")])])])])]),o._v(" "),t("li",[t("ul",[t("li",[o._v("自定义器  "),t("strong",[o._v("XXXXXCustomizer")]),o._v("；")]),o._v(" "),t("li",[o._v("......")])])])]),o._v(" "),t("h3",{attrs:{id:"_4、开发小技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、开发小技巧"}},[o._v("#")]),o._v(" 4、开发小技巧")]),o._v(" "),t("h4",{attrs:{id:"_4-1、lombok"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1、lombok"}},[o._v("#")]),o._v(" 4.1、Lombok")]),o._v(" "),t("p",[o._v("简化JavaBean开发")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v("        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n\n\nidea中搜索安装lombok插件\n\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v('===============================简化JavaBean开发===================================\n@NoArgsConstructor\n//@AllArgsConstructor\n@Data\n@ToString\n@EqualsAndHashCode\npublic class User {\n\n    private String name;\n    private Integer age;\n\n    private Pet pet;\n\n    public User(String name,Integer age){\n        this.name = name;\n        this.age = age;\n    }\n\n\n}\n\n\n\n================================简化日志开发===================================\n@Slf4j\n@RestController\npublic class HelloController {\n    @RequestMapping("/hello")\n    public String handle01(@RequestParam("name") String name){\n        \n        log.info("请求进来了....");\n        \n        return "Hello, Spring Boot 2!"+"你好："+name;\n    }\n}\n\n')])])]),t("h4",{attrs:{id:"_4-2、dev-tools"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2、dev-tools"}},[o._v("#")]),o._v(" 4.2、dev-tools")]),o._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[o._v(" <dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-devtools</artifactId>\n     <optional>true</optional>\n </dependency>\n\n")])])]),t("p",[o._v("项目或者页面修改以后：Ctrl+F9；")]),o._v(" "),t("h4",{attrs:{id:"_4-3、spring-initailizr-项目初始化向导"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3、spring-initailizr-项目初始化向导"}},[o._v("#")]),o._v(" 4.3、Spring Initailizr（项目初始化向导）")]),o._v(" "),t("h5",{attrs:{id:"_0、选择我们需要的开发场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0、选择我们需要的开发场景"}},[o._v("#")]),o._v(" 0、选择我们需要的开发场景")]),o._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602922147241-73fb2496-e795-4b5a-b909-a18c6011a028.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_746",alt:"image.png"}})]),o._v(" "),t("h5",{attrs:{id:"_1、自动依赖引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、自动依赖引入"}},[o._v("#")]),o._v(" 1、自动依赖引入")]),o._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602921777330-8fc5c198-75da-4ff9-b82c-71ee3fe18af8.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_746",alt:"image.png"}})]),o._v(" "),t("h5",{attrs:{id:"_2、自动创建项目结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、自动创建项目结构"}},[o._v("#")]),o._v(" 2、自动创建项目结构")]),o._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602921758313-5099fe18-4c7b-4417-bf6f-2f40b9028296.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_10%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10",alt:"image.png"}})]),o._v(" "),t("h5",{attrs:{id:"_3、自动编写好主配置类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、自动编写好主配置类"}},[o._v("#")]),o._v(" 3、自动编写好主配置类")]),o._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1354552/1602922039074-79e98aad-8158-4113-a7e7-305b57b0a6bf.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_14%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10%2Fresize%2Cw_746",alt:"image.png"}})])])}),[],!1,null,null,null);r.default=a.exports}}]);